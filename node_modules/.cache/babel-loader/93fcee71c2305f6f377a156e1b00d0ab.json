{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\nimport { ok as assert } from 'uvu/assert';\nimport { toString } from 'mdast-util-to-string';\nimport { parse } from 'micromark/lib/parse.js';\nimport { preprocess } from 'micromark/lib/preprocess.js';\nimport { postprocess } from 'micromark/lib/postprocess.js';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when itâ€™s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nexport const fromMarkdown =\n/**\n * @type {(\n *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n *   ((value: Value, options?: Options) => Root)\n * )}\n */\n\n/**\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {Options} [options]\n * @returns {Root}\n */\nfunction (value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n};\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\n\nfunction compiler() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  const config = configure({\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }, options.mdastExtensions || []);\n  /** @type {CompileData} */\n\n  const data = {};\n  return compile;\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {CompileContext['stack']} */\n\n    const stack = [tree];\n    /** @type {CompileContext['tokenStack']} */\n\n    const tokenStack = [];\n    /** @type {Array<number>} */\n\n    const listStack = [];\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n\n    const context = {\n      stack,\n      tokenStack,\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    };\n    let index = -1;\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === types.listOrdered || events[index][1].type === types.listUnordered) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          assert(typeof tail === 'number', 'expected list ot be open');\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n\n    index = -1;\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      const tail = tokenStack[tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    } // Figure out `root` position.\n\n\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n    index = -1;\n\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n\n    return tree;\n  }\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n\n\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token|undefined} */\n\n    let listItem;\n    /** @type {number|undefined} */\n\n    let lineIndex;\n    /** @type {number|undefined} */\n\n    let firstBlankLineIndex;\n    /** @type {boolean|undefined} */\n\n    let atMarker;\n\n    while (++index <= length) {\n      const event = events[index];\n\n      if (event[1].type === types.listUnordered || event[1].type === types.listOrdered || event[1].type === types.blockQuote) {\n        if (event[0] === 'enter') {\n          containerBalance++;\n        } else {\n          containerBalance--;\n        }\n\n        atMarker = undefined;\n      } else if (event[1].type === types.lineEndingBlank) {\n        if (event[0] === 'enter') {\n          if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n            firstBlankLineIndex = index;\n          }\n\n          atMarker = undefined;\n        }\n      } else if (event[1].type === types.linePrefix || event[1].type === types.listItemValue || event[1].type === types.listItemMarker || event[1].type === types.listItemPrefix || event[1].type === types.listItemPrefixWhitespace) {// Empty.\n      } else {\n        atMarker = undefined;\n      }\n\n      if (!containerBalance && event[0] === 'enter' && event[1].type === types.listItemPrefix || containerBalance === -1 && event[0] === 'exit' && (event[1].type === types.listUnordered || event[1].type === types.listOrdered)) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n\n            if (tailEvent[1].type === types.lineEnding || tailEvent[1].type === types.lineEndingBlank) {\n              if (tailEvent[0] === 'exit') continue;\n\n              if (lineIndex) {\n                events[lineIndex][1].type = types.lineEndingBlank;\n                listSpread = true;\n              }\n\n              tailEvent[1].type = types.lineEnding;\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === types.linePrefix || tailEvent[1].type === types.blockQuotePrefix || tailEvent[1].type === types.blockQuotePrefixWhitespace || tailEvent[1].type === types.blockQuoteMarker || tailEvent[1].type === types.listItemIndent) {// Empty\n            } else {\n              break;\n            }\n          }\n\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            // @ts-expect-error Patched.\n            listItem._spread = true;\n          } // Fix position.\n\n\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        } // Create a new list item.\n\n\n        if (event[1].type === types.listItemPrefix) {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }; // @ts-expect-error: `listItem` is most definitely defined, TS...\n\n          events.splice(index, 0, ['enter', listItem, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    } // @ts-expect-error Patched.\n\n\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n\n  function setData(key, value) {\n    data[key] = value;\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n\n  function getData(key) {\n    return data[key];\n  }\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n\n\n  function point(d) {\n    return {\n      line: d.line,\n      column: d.column,\n      offset: d.offset\n    };\n  }\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n\n  function opener(create, and) {\n    return open;\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n  /** @type {CompileContext['buffer']} */\n\n\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n\n\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    assert(parent, 'expected `parent`');\n    assert('children' in parent, 'expected `parent`'); // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n\n    parent.children.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]); // @ts-expect-error: `end` will be patched later.\n\n    node.position = {\n      start: point(token.start)\n    };\n    return node;\n  }\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n\n  function closer(and) {\n    return close;\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n\n\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    assert(node, 'expected `node`');\n    const open = this.tokenStack.pop();\n\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): itâ€™s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n\n    assert(node.type !== 'fragment', 'unexpected fragment `exit`ed');\n    assert(node.position, 'expected `position` to be defined');\n    node.position.end = point(token.end);\n    return node;\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n\n\n  function resume() {\n    return toString(this.stack.pop());\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true);\n  }\n  /** @type {Handle} */\n\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor =\n      /** @type {List} */\n      this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), constants.numericBaseDecimal);\n      setData('expectingFirstListItemValue');\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return;\n    this.buffer();\n    setData('flowCodeInside', true);\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    setData('flowCodeInside');\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n  /** @type {Handle} */\n\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    const label = this.resume();\n    const node =\n    /** @type {Definition} */\n    this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n  /** @type {Handle} */\n\n\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node =\n    /** @type {Definition} */\n    this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node =\n    /** @type {Definition} */\n    this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitatxheadingsequence(token) {\n    const node =\n    /** @type {Heading} */\n    this.stack[this.stack.length - 1];\n\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      assert(depth === 1 || depth === 2 || depth === 3 || depth === 4 || depth === 5 || depth === 6, 'expected `depth` between `1` and `6`');\n      node.depth = depth;\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true);\n  }\n  /** @type {Handle} */\n\n\n  function onexitsetextheadinglinesequence(token) {\n    const node =\n    /** @type {Heading} */\n    this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === codes.equalsTo ? 1 : 2;\n  }\n  /** @type {Handle} */\n\n\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding');\n  }\n  /** @type {Handle} */\n\n\n  function onenterdata(token) {\n    const parent =\n    /** @type {Parent} */\n    this.stack[this.stack.length - 1];\n    /** @type {Node} */\n\n    let tail = parent.children[parent.children.length - 1];\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text(); // @ts-expect-error: weâ€™ll add `end` later.\n\n      tail.position = {\n        start: point(token.start)\n      }; // @ts-expect-error: Assume `parent` accepts `text`.\n\n      parent.children.push(tail);\n    }\n\n    this.stack.push(tail);\n  }\n  /** @type {Handle} */\n\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    assert(tail, 'expected a `node` to be on the stack');\n    assert('value' in tail, 'expected a `literal` to be on the stack');\n    assert(tail.position, 'expected `node` to have an open position');\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n  /** @type {Handle} */\n\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    assert(context, 'expected `node`'); // If weâ€™re at a hard break, include the line ending in there.\n\n    if (getData('atHardBreak')) {\n      assert('children' in context, 'expected `parent`');\n      const tail = context.children[context.children.length - 1];\n      assert(tail.position, 'expected tail to have a starting position');\n      tail.position.end = point(token.end);\n      setData('atHardBreak');\n      return;\n    }\n\n    if (!getData('setextHeadingSlurpLineEnding') && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexithardbreak() {\n    setData('atHardBreak', true);\n  }\n  /** @type {Handle} */\n\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node =\n    /** @type {HTML} */\n    this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node =\n    /** @type {HTML} */\n    this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node =\n    /** @type {InlineCode} */\n    this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitlink() {\n    const context =\n    /** @type {Link & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 1]; // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference'; // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut'; // @ts-expect-error: mutate.\n\n      delete context.url;\n      delete context.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier; // @ts-expect-error: mutate.\n\n      delete context.label;\n    }\n\n    setData('referenceType');\n  }\n  /** @type {Handle} */\n\n\n  function onexitimage() {\n    const context =\n    /** @type {Image & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 1]; // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference'; // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut'; // @ts-expect-error: mutate.\n\n      delete context.url;\n      delete context.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier; // @ts-expect-error: mutate.\n\n      delete context.label;\n    }\n\n    setData('referenceType');\n  }\n  /** @type {Handle} */\n\n\n  function onexitlabeltext(token) {\n    const ancestor =\n    /** @type {(Link|Image) & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 2];\n    const string = this.sliceSerialize(token);\n    ancestor.label = decodeString(string);\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n  /** @type {Handle} */\n\n\n  function onexitlabel() {\n    const fragment =\n    /** @type {Fragment} */\n    this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node =\n    /** @type {(Link|Image) & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 1]; // Assume a reference.\n\n    setData('inReference', true);\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children;\n    } else {\n      node.alt = value;\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node =\n    /** @type {Link|Image} */\n    this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node =\n    /** @type {Link|Image} */\n    this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitresource() {\n    setData('inReference');\n  }\n  /** @type {Handle} */\n\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed');\n  }\n  /** @type {Handle} */\n\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node =\n    /** @type {LinkReference|ImageReference} */\n    this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    setData('referenceType', 'full');\n  }\n  /** @type {Handle} */\n\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type);\n  }\n  /** @type {Handle} */\n\n\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = getData('characterReferenceType');\n    /** @type {string} */\n\n    let value;\n\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === types.characterReferenceMarkerNumeric ? constants.numericBaseDecimal : constants.numericBaseHexadecimal);\n      setData('characterReferenceType');\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything weâ€™ve tokenized is\n      // valid.\n      value = decodeNamedCharacterReference(data);\n    }\n\n    const tail = this.stack.pop();\n    assert(tail, 'expected `node`');\n    assert(tail.position, 'expected `node.position`');\n    assert('value' in tail, 'expected `node.value`');\n    tail.value += value;\n    tail.position.end = point(token.end);\n  }\n  /** @type {Handle} */\n\n\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node =\n    /** @type {Link} */\n    this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n  /** @type {Handle} */\n\n\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node =\n    /** @type {Link} */\n    this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  } //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n\n\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n  /** @returns {Code} */\n\n\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n  /** @returns {InlineCode} */\n\n\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n  /** @returns {Definition} */\n\n\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n  /** @returns {Emphasis} */\n\n\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n  /** @returns {Heading} */\n\n\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    };\n  }\n  /** @returns {Break} */\n\n\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n  /** @returns {HTML} */\n\n\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n  /** @returns {Image} */\n\n\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n  /** @returns {Link} */\n\n\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n\n\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    };\n  }\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n\n\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n  /** @returns {Paragraph} */\n\n\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n  /** @returns {Strong} */\n\n\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n  /** @returns {Text} */\n\n\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n  /** @returns {ThematicBreak} */\n\n\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\n\n\nfunction configure(combined, extensions) {\n  let index = -1;\n\n  while (++index < extensions.length) {\n    const value = extensions[index];\n\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n\n  return combined;\n}\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\n\n\nfunction extension(combined, extension) {\n  /** @type {string} */\n  let key;\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      const list = key === 'canContainEols' || key === 'transforms';\n      const maybe = own.call(combined, key) ? combined[key] : undefined;\n      /* c8 ignore next */\n\n      const left = maybe || (combined[key] = list ? [] : {});\n      const right = extension[key];\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [...left, ...right];\n        } else {\n          Object.assign(left, right);\n        }\n      }\n    }\n  }\n}\n/** @type {OnEnterError} */\n\n\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","map":{"version":3,"sources":["/Users/mactamong/Desktop/ygnoh_homepage_v2/á„†á…®á„Œá…¦/node_modules/mdast-util-from-markdown/dev/lib/index.js"],"names":["ok","assert","toString","parse","preprocess","postprocess","decodeNumericCharacterReference","decodeString","normalizeIdentifier","codes","constants","types","decodeNamedCharacterReference","stringifyPosition","own","hasOwnProperty","fromMarkdown","value","encoding","options","undefined","compiler","document","write","config","configure","transforms","canContainEols","enter","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","heading","blockQuote","characterEscape","characterReference","codeFenced","codeFlow","codeFencedFenceInfo","buffer","codeFencedFenceMeta","codeIndented","codeText","codeTextData","data","codeFlowValue","definition","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlow","html","htmlFlowData","htmlText","htmlTextData","image","label","listItem","listItemValue","onenterlistitemvalue","listOrdered","list","onenterlistordered","listUnordered","paragraph","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","thematicBreak","exit","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","lineEnding","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","mdastExtensions","compile","events","tree","type","children","stack","tokenStack","listStack","context","resume","setData","getData","index","length","push","tail","pop","prepareList","handler","call","Object","assign","sliceSerialize","defaultOnError","position","start","point","line","column","offset","end","containerBalance","listSpread","lineIndex","firstBlankLineIndex","atMarker","event","lineEndingBlank","linePrefix","listItemMarker","listItemPrefix","listItemPrefixWhitespace","tailIndex","tailEvent","blockQuotePrefix","blockQuotePrefixWhitespace","blockQuoteMarker","listItemIndent","_spread","splice","key","d","create","and","open","token","node","errorHandler","parent","close","onExitError","Error","ancestor","Number","parseInt","numericBaseDecimal","lang","meta","replace","identifier","toLowerCase","title","url","depth","charCodeAt","equalsTo","text","includes","referenceType","string","fragment","alt","numericBaseHexadecimal","ordered","spread","checked","combined","extensions","Array","isArray","extension","maybe","left","right"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AACA,SAAQC,QAAR,QAAuB,sBAAvB;AACA,SAAQC,KAAR,QAAoB,wBAApB;AACA,SAAQC,UAAR,QAAyB,6BAAzB;AACA,SAAQC,WAAR,QAA0B,8BAA1B;AACA,SAAQC,+BAAR,QAA8C,mDAA9C;AACA,SAAQC,YAAR,QAA2B,8BAA3B;AACA,SAAQC,mBAAR,QAAkC,qCAAlC;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,SAAR,QAAwB,oCAAxB;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,6BAAR,QAA4C,kCAA5C;AACA,SAAQC,iBAAR,QAAgC,+BAAhC;AAEA,MAAMC,GAAG,GAAG,GAAGC,cAAf;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY;AACvB;AACF;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACI,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,OAA3B,EAAoC;AAClC,MAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AAChCC,IAAAA,OAAO,GAAGD,QAAV;AACAA,IAAAA,QAAQ,GAAGE,SAAX;AACD;;AAED,SAAOC,QAAQ,CAACF,OAAD,CAAR,CACLd,WAAW,CACTF,KAAK,CAACgB,OAAD,CAAL,CAAeG,QAAf,GAA0BC,KAA1B,CAAgCnB,UAA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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when itâ€™s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n   *   ((value: Value, options?: Options) => Root)\n   * )}\n   */\n  (\n    /**\n     * @param {Value} value\n     * @param {Encoding} [encoding]\n     * @param {Options} [options]\n     * @returns {Root}\n     */\n    function (value, encoding, options) {\n      if (typeof encoding !== 'string') {\n        options = encoding\n        encoding = undefined\n      }\n\n      return compiler(options)(\n        postprocess(\n          parse(options).document().write(preprocess()(value, encoding, true))\n        )\n      )\n    }\n  )\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\nfunction compiler(options = {}) {\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  const config = configure(\n    {\n      transforms: [],\n      canContainEols: [\n        'emphasis',\n        'fragment',\n        'heading',\n        'paragraph',\n        'strong'\n      ],\n      enter: {\n        autolink: opener(link),\n        autolinkProtocol: onenterdata,\n        autolinkEmail: onenterdata,\n        atxHeading: opener(heading),\n        blockQuote: opener(blockQuote),\n        characterEscape: onenterdata,\n        characterReference: onenterdata,\n        codeFenced: opener(codeFlow),\n        codeFencedFenceInfo: buffer,\n        codeFencedFenceMeta: buffer,\n        codeIndented: opener(codeFlow, buffer),\n        codeText: opener(codeText, buffer),\n        codeTextData: onenterdata,\n        data: onenterdata,\n        codeFlowValue: onenterdata,\n        definition: opener(definition),\n        definitionDestinationString: buffer,\n        definitionLabelString: buffer,\n        definitionTitleString: buffer,\n        emphasis: opener(emphasis),\n        hardBreakEscape: opener(hardBreak),\n        hardBreakTrailing: opener(hardBreak),\n        htmlFlow: opener(html, buffer),\n        htmlFlowData: onenterdata,\n        htmlText: opener(html, buffer),\n        htmlTextData: onenterdata,\n        image: opener(image),\n        label: buffer,\n        link: opener(link),\n        listItem: opener(listItem),\n        listItemValue: onenterlistitemvalue,\n        listOrdered: opener(list, onenterlistordered),\n        listUnordered: opener(list),\n        paragraph: opener(paragraph),\n        reference: onenterreference,\n        referenceString: buffer,\n        resourceDestinationString: buffer,\n        resourceTitleString: buffer,\n        setextHeading: opener(heading),\n        strong: opener(strong),\n        thematicBreak: opener(thematicBreak)\n      },\n      exit: {\n        atxHeading: closer(),\n        atxHeadingSequence: onexitatxheadingsequence,\n        autolink: closer(),\n        autolinkEmail: onexitautolinkemail,\n        autolinkProtocol: onexitautolinkprotocol,\n        blockQuote: closer(),\n        characterEscapeValue: onexitdata,\n        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n        characterReferenceValue: onexitcharacterreferencevalue,\n        codeFenced: closer(onexitcodefenced),\n        codeFencedFence: onexitcodefencedfence,\n        codeFencedFenceInfo: onexitcodefencedfenceinfo,\n        codeFencedFenceMeta: onexitcodefencedfencemeta,\n        codeFlowValue: onexitdata,\n        codeIndented: closer(onexitcodeindented),\n        codeText: closer(onexitcodetext),\n        codeTextData: onexitdata,\n        data: onexitdata,\n        definition: closer(),\n        definitionDestinationString: onexitdefinitiondestinationstring,\n        definitionLabelString: onexitdefinitionlabelstring,\n        definitionTitleString: onexitdefinitiontitlestring,\n        emphasis: closer(),\n        hardBreakEscape: closer(onexithardbreak),\n        hardBreakTrailing: closer(onexithardbreak),\n        htmlFlow: closer(onexithtmlflow),\n        htmlFlowData: onexitdata,\n        htmlText: closer(onexithtmltext),\n        htmlTextData: onexitdata,\n        image: closer(onexitimage),\n        label: onexitlabel,\n        labelText: onexitlabeltext,\n        lineEnding: onexitlineending,\n        link: closer(onexitlink),\n        listItem: closer(),\n        listOrdered: closer(),\n        listUnordered: closer(),\n        paragraph: closer(),\n        referenceString: onexitreferencestring,\n        resourceDestinationString: onexitresourcedestinationstring,\n        resourceTitleString: onexitresourcetitlestring,\n        resource: onexitresource,\n        setextHeading: closer(onexitsetextheading),\n        setextHeadingLineSequence: onexitsetextheadinglinesequence,\n        setextHeadingText: onexitsetextheadingtext,\n        strong: closer(),\n        thematicBreak: closer()\n      }\n    },\n    options.mdastExtensions || []\n  )\n\n  /** @type {CompileData} */\n  const data = {}\n\n  return compile\n\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {type: 'root', children: []}\n    /** @type {CompileContext['stack']} */\n    const stack = [tree]\n    /** @type {CompileContext['tokenStack']} */\n    const tokenStack = []\n    /** @type {Array<number>} */\n    const listStack = []\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack,\n      tokenStack,\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    let index = -1\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === types.listOrdered ||\n        events[index][1].type === types.listUnordered\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          assert(typeof tail === 'number', 'expected list ot be open')\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {sliceSerialize: events[index][2].sliceSerialize},\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      const tail = tokenStack[tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0 ? events[0][1].start : {line: 1, column: 1, offset: 0}\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {line: 1, column: 1, offset: 0}\n      )\n    }\n\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token|undefined} */\n    let listItem\n    /** @type {number|undefined} */\n    let lineIndex\n    /** @type {number|undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean|undefined} */\n    let atMarker\n\n    while (++index <= length) {\n      const event = events[index]\n\n      if (\n        event[1].type === types.listUnordered ||\n        event[1].type === types.listOrdered ||\n        event[1].type === types.blockQuote\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n\n        atMarker = undefined\n      } else if (event[1].type === types.lineEndingBlank) {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === types.linePrefix ||\n        event[1].type === types.listItemValue ||\n        event[1].type === types.listItemMarker ||\n        event[1].type === types.listItemPrefix ||\n        event[1].type === types.listItemPrefixWhitespace\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === types.listItemPrefix) ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === types.listUnordered ||\n            event[1].type === types.listOrdered))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n\n            if (\n              tailEvent[1].type === types.lineEnding ||\n              tailEvent[1].type === types.lineEndingBlank\n            ) {\n              if (tailEvent[0] === 'exit') continue\n\n              if (lineIndex) {\n                events[lineIndex][1].type = types.lineEndingBlank\n                listSpread = true\n              }\n\n              tailEvent[1].type = types.lineEnding\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === types.linePrefix ||\n              tailEvent[1].type === types.blockQuotePrefix ||\n              tailEvent[1].type === types.blockQuotePrefixWhitespace ||\n              tailEvent[1].type === types.blockQuoteMarker ||\n              tailEvent[1].type === types.listItemIndent\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === types.listItemPrefix) {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n  function point(d) {\n    return {line: d.line, column: d.column, offset: d.offset}\n  }\n\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /** @type {CompileContext['buffer']} */\n  function buffer() {\n    this.stack.push({type: 'fragment', children: []})\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    assert(parent, 'expected `parent`')\n    assert('children' in parent, 'expected `parent`')\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {start: point(token.start)}\n    return node\n  }\n\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    assert(node, 'expected `node`')\n    const open = this.tokenStack.pop()\n\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({start: token.start, end: token.end}) +\n          '): itâ€™s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n\n    assert(node.type !== 'fragment', 'unexpected fragment `exit`ed')\n    assert(node.position, 'expected `position` to be defined')\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /** @type {Handle} */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = /** @type {List} */ (this.stack[this.stack.length - 2])\n      ancestor.start = Number.parseInt(\n        this.sliceSerialize(token),\n        constants.numericBaseDecimal\n      )\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /** @type {Handle} */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = /** @type {Code} */ (this.stack[this.stack.length - 1])\n    node.lang = data\n  }\n\n  /** @type {Handle} */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = /** @type {Code} */ (this.stack[this.stack.length - 1])\n    node.meta = data\n  }\n\n  /** @type {Handle} */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /** @type {Handle} */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = /** @type {Code} */ (this.stack[this.stack.length - 1])\n\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n\n    setData('flowCodeInside')\n  }\n\n  /** @type {Handle} */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = /** @type {Code} */ (this.stack[this.stack.length - 1])\n\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /** @type {Handle} */\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    const label = this.resume()\n    const node = /** @type {Definition} */ (this.stack[this.stack.length - 1])\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /** @type {Handle} */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = /** @type {Definition} */ (this.stack[this.stack.length - 1])\n    node.title = data\n  }\n\n  /** @type {Handle} */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = /** @type {Definition} */ (this.stack[this.stack.length - 1])\n    node.url = data\n  }\n\n  /** @type {Handle} */\n  function onexitatxheadingsequence(token) {\n    const node = /** @type {Heading} */ (this.stack[this.stack.length - 1])\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n\n      assert(\n        depth === 1 ||\n          depth === 2 ||\n          depth === 3 ||\n          depth === 4 ||\n          depth === 5 ||\n          depth === 6,\n        'expected `depth` between `1` and `6`'\n      )\n\n      node.depth = depth\n    }\n  }\n\n  /** @type {Handle} */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /** @type {Handle} */\n  function onexitsetextheadinglinesequence(token) {\n    const node = /** @type {Heading} */ (this.stack[this.stack.length - 1])\n\n    node.depth =\n      this.sliceSerialize(token).charCodeAt(0) === codes.equalsTo ? 1 : 2\n  }\n\n  /** @type {Handle} */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /** @type {Handle} */\n  function onenterdata(token) {\n    const parent = /** @type {Parent} */ (this.stack[this.stack.length - 1])\n    /** @type {Node} */\n    let tail = parent.children[parent.children.length - 1]\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: weâ€™ll add `end` later.\n      tail.position = {start: point(token.start)}\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      parent.children.push(tail)\n    }\n\n    this.stack.push(tail)\n  }\n\n  /** @type {Handle} */\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    assert(tail, 'expected a `node` to be on the stack')\n    assert('value' in tail, 'expected a `literal` to be on the stack')\n    assert(tail.position, 'expected `node` to have an open position')\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /** @type {Handle} */\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    assert(context, 'expected `node`')\n\n    // If weâ€™re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      assert('children' in context, 'expected `parent`')\n      const tail = context.children[context.children.length - 1]\n      assert(tail.position, 'expected tail to have a starting position')\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /** @type {Handle} */\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /** @type {Handle} */\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = /** @type {HTML} */ (this.stack[this.stack.length - 1])\n    node.value = data\n  }\n\n  /** @type {Handle} */\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = /** @type {HTML} */ (this.stack[this.stack.length - 1])\n    node.value = data\n  }\n\n  /** @type {Handle} */\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n    node.value = data\n  }\n\n  /** @type {Handle} */\n  function onexitlink() {\n    const context = /** @type {Link & {identifier: string, label: string}} */ (\n      this.stack[this.stack.length - 1]\n    )\n\n    // To do: clean.\n    if (getData('inReference')) {\n      context.type += 'Reference'\n      // @ts-expect-error: mutate.\n      context.referenceType = getData('referenceType') || 'shortcut'\n      // @ts-expect-error: mutate.\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier\n      // @ts-expect-error: mutate.\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n\n  /** @type {Handle} */\n  function onexitimage() {\n    const context = /** @type {Image & {identifier: string, label: string}} */ (\n      this.stack[this.stack.length - 1]\n    )\n\n    // To do: clean.\n    if (getData('inReference')) {\n      context.type += 'Reference'\n      // @ts-expect-error: mutate.\n      context.referenceType = getData('referenceType') || 'shortcut'\n      // @ts-expect-error: mutate.\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier\n      // @ts-expect-error: mutate.\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n\n  /** @type {Handle} */\n  function onexitlabeltext(token) {\n    const ancestor =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */ (\n        this.stack[this.stack.length - 2]\n      )\n    const string = this.sliceSerialize(token)\n\n    ancestor.label = decodeString(string)\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /** @type {Handle} */\n  function onexitlabel() {\n    const fragment = /** @type {Fragment} */ (this.stack[this.stack.length - 1])\n    const value = this.resume()\n    const node =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */ (\n        this.stack[this.stack.length - 1]\n      )\n\n    // Assume a reference.\n    setData('inReference', true)\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /** @type {Handle} */\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = /** @type {Link|Image} */ (this.stack[this.stack.length - 1])\n    node.url = data\n  }\n\n  /** @type {Handle} */\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = /** @type {Link|Image} */ (this.stack[this.stack.length - 1])\n    node.title = data\n  }\n\n  /** @type {Handle} */\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /** @type {Handle} */\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /** @type {Handle} */\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = /** @type {LinkReference|ImageReference} */ (\n      this.stack[this.stack.length - 1]\n    )\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /** @type {Handle} */\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /** @type {Handle} */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === types.characterReferenceMarkerNumeric\n          ? constants.numericBaseDecimal\n          : constants.numericBaseHexadecimal\n      )\n      setData('characterReferenceType')\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything weâ€™ve tokenized is\n      // valid.\n      value = decodeNamedCharacterReference(data)\n    }\n\n    const tail = this.stack.pop()\n    assert(tail, 'expected `node`')\n    assert(tail.position, 'expected `node.position`')\n    assert('value' in tail, 'expected `node.value`')\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /** @type {Handle} */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n    node.url = this.sliceSerialize(token)\n  }\n\n  /** @type {Handle} */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {type: 'blockquote', children: []}\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {type: 'code', lang: null, meta: null, value: ''}\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {type: 'inlineCode', value: ''}\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {type: 'emphasis', children: []}\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {type: 'heading', depth: undefined, children: []}\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {type: 'break'}\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {type: 'html', value: ''}\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {type: 'image', title: null, url: '', alt: null}\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {type: 'link', title: null, url: '', children: []}\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {type: 'paragraph', children: []}\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {type: 'strong', children: []}\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {type: 'text', value: ''}\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {type: 'thematicBreak'}\n  }\n}\n\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n\n  while (++index < extensions.length) {\n    const value = extensions[index]\n\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n\n  return combined\n}\n\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {string} */\n  let key\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      const list = key === 'canContainEols' || key === 'transforms'\n      const maybe = own.call(combined, key) ? combined[key] : undefined\n      /* c8 ignore next */\n      const left = maybe || (combined[key] = list ? [] : {})\n      const right = extension[key]\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [...left, ...right]\n        } else {\n          Object.assign(left, right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({start: left.start, end: left.end}) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({start: right.start, end: right.end}) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({start: right.start, end: right.end}) +\n        ') is still open'\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}