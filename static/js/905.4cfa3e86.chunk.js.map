{"version":3,"file":"static/js/905.4cfa3e86.chunk.js","mappings":"oPA8DO,IAAMA,GAAOC,EAAAA,EAAAA,GAA6B,SAAcC,EAAOC,GACpE,MAAM,UAAEC,EAAF,MAAaC,EAAb,QAAoBC,EAApB,KAA6BC,EAA7B,MAAmCC,EAAnC,KAA0CC,EAA1C,OAAgDC,GACpDR,EAD+DS,GAAjE,OACET,EADF,GAGMU,EAAS,CACbC,QAAS,OACTC,cAAeV,EACfW,WAAYV,EACZW,eAAgBV,EAChBW,SAAUV,EACVW,UAAWV,EACXW,SAAUV,EACVW,WAAYV,GAGd,OAAO,SAACW,EAAAA,EAAOC,KAAR,QAAYnB,MAAUoB,MAAOX,GAAYD,GACjD,GAEDX,EAAKwB,YAAc,M,iLC7CZ,IAAMC,GAAOxB,EAAAA,EAAAA,GAA2B,SAAcC,EAAOC,GAClE,MAAMS,GAASc,EAAAA,EAAAA,IAAe,OAAQxB,GACtC,GACEyB,EAAAA,EAAAA,IAAiBzB,IADb,UAAE0B,EAAF,MAAavB,EAAb,WAAoBwB,EAApB,OAAgCC,GAAtC,EAAiDnB,GAAjD,YAGMoB,GAAeC,EAAAA,EAAAA,GAAQ,CAC3BC,UAAW/B,EAAMG,MACjB6B,eAAgBhC,EAAM2B,WACtBM,cAAejC,EAAM4B,SAGvB,OACE,SAACT,EAAAA,EAAOe,GAAR,wBACEjC,MACAyB,WAAWS,EAAAA,EAAAA,IAAG,cAAenC,EAAM0B,YAC/BG,GACApB,GAJN,IAKEY,MAAOX,IAGZ,GAEDa,EAAKD,YAAc,M,sKC/CJ,SAASc,EAAT,GAIJ,IAJ+B,IACxCC,EADwC,OAExCC,EAAS,IAF+B,MAGxCC,EAAQ,4BACA,EACR,OACE,UAAC,IAAD,CAAMrC,UAAU,SAASsC,IAAK,EAA9B,WACE,UAAC,IAAD,CAAQpC,QAAQ,gBAAhB,WACE,SAAC,IAAD,CAAMqC,SAAS,KAAKC,WAAW,OAA/B,gDACA,SAAC,IAAD,CACEC,GAAG,IACHC,KAAMP,EACNQ,OAAO,SACPC,IAAI,sBACJC,QAAQ,OACRC,KAAK,KACLP,SAAS,KAPX,iCAaF,gBAAKJ,IAAKY,EAAOC,IAAI,YAAYC,MAAM,SAASC,MAAO,CAAEC,cAAe,SAAU1C,QAAS,eAAgB2C,OAAQ,iBAkBxH,CCtBM,MAAMC,EAAW,KAIhB,SAAC,KAAD,WAEK,SAACnB,EAAD,CAAmBC,IAAI,GAAGC,OAAQ,O,iBCjC/C,SAASR,EAAQ0B,GACf,MAAMC,EAAQC,OAAOC,OAAO,CAAC,EAAGH,GAChC,IAAK,IAAII,KAAOH,OACK,IAAfA,EAAMG,WACDH,EAAMG,GAEjB,OAAOH,CACR,C","sources":["../node_modules/@chakra-ui/layout/src/flex.tsx","../node_modules/@chakra-ui/layout/src/text.tsx","pages/chat/EmbeddedProtfolio.tsx","pages/about/Home.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","\nimport { Box, Button, Flex, HStack, Text } from \"@chakra-ui/react\";\nimport Under from \"../../content/under_dev.png\"\n\ntype Props = {\n  src: string;          // 배포된 외부 포트폴리오 URL\n  height?: string | number; // 기본 높이\n  title?: string;       // 접근성/SEO용 제목\n};\n\nexport default function EmbeddedPortfolio({\n  src,\n  height = 800, // 필요하면 조절\n  title = \"External Portfolio Embed\",\n}: Props) {\n  return (\n    <Flex direction=\"column\" gap={3}>\n      <HStack justify=\"space-between\">\n        <Text fontSize=\"16\" fontWeight=\"bold\">The chatbot is under development.</Text>\n        <Button\n          as=\"a\"\n          href={src}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          variant=\"link\"\n          size=\"sm\"\n          fontSize=\"16\"\n        >\n          Open in new tab\n        </Button>\n      </HStack>\n      \n      <img src={Under} alt=\"Under dev\" width=\"1000px\" style={{ verticalAlign: \"middle\", display: \"inline-block\", margin: \"0 0.25rem\" }}/>   \n     \n\n      {/* <Box\n        as=\"iframe\"\n        src={src}\n        title={title}\n        width=\"100%\"\n        height={height}\n        border=\"0\"\n        borderRadius=\"16px\"\n        // 필요 시 스크롤/보안 옵션\n        // sandbox=\"allow-scripts allow-same-origin allow-forms allow-popups\"\n        // allow=\"clipboard-write; microphone; camera\"\n        // style={{ background: \"transparent\" }}\n      /> */}\n    </Flex>\n  );\n}\n","import { \n    FC, \n    useEffect, \n    useRef, \n    useState // 챗봇을 위해 useState 추가\n} from \"react\";\nimport { \n    useColorModeValue, \n    Stack, \n    Box, \n    Flex, \n    Text, \n    Image, \n    HStack,\n    VStack,      \n    Button,      \n    Wrap,       \n    WrapItem    \n} from \"@chakra-ui/react\";\nimport Typed from \"typed.js\"; \nimport { Socials } from \"shared/socials/Socials\";\nimport { configs, Content, MarkdownFile, useContent } from \"shared/content/Content\";\nimport Hello from '../../utils/assets/Hello.gif'\nimport EmbeddedPortfolio from \"pages/chat/EmbeddedProtfolio\";\n\n\n\n// --- 메인 About 컴포넌트 ---\nexport const Home: FC = () => {\n   \n\n    return (\n        <Box >\n             {/* <EmbeddedPortfolio src=\"https://68fbb9234978780007226d3c--chatwithygnoh.netlify.app\" height={900} /> */}\n             <EmbeddedPortfolio src=\"\" height={900} />\n            \n        </Box>\n        \n    );\n};","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n"],"names":["Flex","forwardRef","props","ref","direction","align","justify","wrap","basis","grow","shrink","rest","styles","display","flexDirection","alignItems","justifyContent","flexWrap","flexBasis","flexGrow","flexShrink","chakra","div","__css","displayName","Text","useStyleConfig","omitThemingProps","className","decoration","casing","aliasedProps","compact","textAlign","textDecoration","textTransform","p","cx","EmbeddedPortfolio","src","height","title","gap","fontSize","fontWeight","as","href","target","rel","variant","size","Under","alt","width","style","verticalAlign","margin","Home","object","clone","Object","assign","key"],"sourceRoot":""}