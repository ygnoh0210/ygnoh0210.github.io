{"version":3,"file":"static/js/734.84bcca67.chunk.js","mappings":"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","sources":["shared/navbar/logo-type/LogoType.tsx","shared/color-mode-button/ColorModeButton.tsx","shared/navbar/drawer/Drawer.tsx","shared/navbar/Navbar.tsx","shared/socials/Socials.tsx","utils/Functions.ts","../node_modules/@chakra-ui/media-query/dist/chakra-ui-media-query.esm.js"],"sourcesContent":["import { FC } from \"react\";\nimport { AboutPageId, useScroll, WorkPageId, HomeId } from \"utils/useScroll\";\n\nimport { Box, Flex, Text, Heading, useBreakpointValue, Button, IconButton, WrapItem, Tooltip, Image, Badge } from \"@chakra-ui/react\";\nimport { configs, Content, MarkdownFile, useContent } from \"shared/content/Content\";\nimport { VolumeIcon } from \"utils/Icons\";\ninterface Props {\n    text: {\n        mobile: string;\n        desktop: string;\n    };\n}\n\nexport const LogoType: FC<Props> = ({ text }) => {\n    const variant = useBreakpointValue({ base: text.mobile, md: text.desktop });\n    const onPlay = () => {\n        const audio = new Audio(configs.common.audioFile);\n        audio.play();\n    };\n    const currentPage = useScroll();\n\n    const toSection = (section: string, offset=75) => {\n        const element = document.getElementById(section)\n        if (element) {\n            const elementPosition = element.getBoundingClientRect().top + window.scrollY;\n            const targetPosition = elementPosition - offset;\n            window.scrollTo({ top: targetPosition, behavior: \"smooth\" });\n        }\n    };\n\n\n    return (\n        <Box onClick={() => toSection(HomeId)} transition=\"all 0.2s ease-in-out\" _hover={{ cursor: \"pointer\", color: \"primary.600\" }}>\n        \n\n            <Text fontSize=\"50px\" fontWeight=\"600\" lineHeight=\"1\"  mb={{ base: 0, md: 0 }}>\n                ☁️\n                {/* {variant}\n                        <Button\n                        size=\"s\"\n                        aria-label=\"pronunciation button\"\n                        as={IconButton}\n                        variant=\"icon\"\n                        fontSize=\"md\"\n                        color=\"primary.500\"\n                        icon={<VolumeIcon />}\n                        onClick={onPlay}\n                        />  */}\n                \n            </Text>\n      \n            {/* <Badge >Updated in May.2025</Badge> */}\n                         \n        </Box>\n    );\n};\n","import { FC } from \"react\";\nimport {\n  HStack,\n  IconButton,\n  StyleProps,\n  Tooltip,\n  useColorMode,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { MoonIcon, SunIcon } from \"utils/Icons\";\n\nexport const ColorModeButton: FC<StyleProps> = (props) => {\n  const color = useColorModeValue(\"gray.800\", \"white\");\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  const tooltipLabel = colorMode === \"light\" ? \"Dark Mode\" : \"Light Mode\";\n\n  return (\n    <HStack {...props}>\n      <Tooltip label={tooltipLabel} hasArrow placement=\"bottom\">\n        <IconButton\n          aria-label=\"appearance\"\n          bg=\"transparent\"\n          color=\"primary.500\"\n          fontSize=\"lg\"\n          _hover={{ color: \"gray.400\" }}\n          _active={{ bg: \"transparent\" }}\n          icon={colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\n          variant=\"ghost\"\n          size=\"xs\"\n          onClick={() => {\n            toggleColorMode();\n            window.scrollBy(0, 1);\n            window.scrollBy(0, -1);\n          }}\n          w=\"32px\"\n          h=\"32px\"\n        />\n      </Tooltip>\n    </HStack>\n  );\n};\n","import { FC, useRef } from \"react\";\n\nimport {\n    Box,\n    Button,\n    Drawer,\n    DrawerBody,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton,\n    useDisclosure,\n    IconButton,\n    StyleProps,\n    Flex,\n    VStack,\n    useColorModeValue,\n    Text\n} from \"@chakra-ui/react\";\n\nimport { ColorModeButton } from \"shared/color-mode-button/ColorModeButton\";\nimport { AboutPageId, WorkPageId, HomeId, ExperienceId } from \"utils/useScroll\";\n\nimport { MenuIcon } from \"utils/Icons\";\nimport { Socials } from \"shared/socials/Socials\";\nimport { onResumeOpen } from \"utils/Functions\";\n\nexport const open = (link: string) => window.open(link, \"_blank\");\ninterface Props extends StyleProps {\n    onSectionClick: (section: string) => void;\n    currentPage: string;\n}\n\nexport const MenuDrawer: FC<Props> = ({ onSectionClick, currentPage, ...props }) => {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const btnRef = useRef<any>(null);\n    const navItemColor = useColorModeValue(\"gray.800\", \"white\");\n\n    return (\n        <Box {...props}>\n            <Button\n                as={IconButton}\n                variant=\"icon\"\n                ref={btnRef}\n                aria-label=\"open drawer\"\n                fontSize=\"lg\"\n                color=\"primary.500\"\n                icon={<ColorModeButton />}\n                px=\"0\"\n            />\n            <Button\n                as={IconButton}\n                variant=\"icon\"\n                ref={btnRef}\n                onClick={onOpen}\n                aria-label=\"open drawer\"\n                fontSize=\"lg\"\n                color=\"primary.500\"\n                icon={<MenuIcon />}\n                px=\"0\"\n            />\n            \n            <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose} autoFocus={false}>\n                <DrawerOverlay />\n                <DrawerContent>\n                    <DrawerHeader px=\"4\">\n                        <Flex justifyContent=\"space-between\">\n                            {/* <ColorModeButton /> */}\n                            <DrawerCloseButton position=\"relative\" top=\"0\" right=\"0\" />\n                        </Flex>\n                    </DrawerHeader>\n\n                    <DrawerBody>\n                        <VStack spacing=\"6\" my=\"16\">\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration=\"primary.500\"\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor={currentPage === AboutPageId ? \"underline\" : \"transparent\"}\n                                onClick={() => {\n                                    onClose();\n                                    setTimeout(() => {\n                                        onSectionClick(HomeId);\n                                    }, 250);\n                                }}\n                                \n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                home\n                            </Button>\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={currentPage === WorkPageId ? \"primary.500\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"underline\"\n                                onClick={() => {\n                                    onClose();\n                                    setTimeout(() => {\n                                        onSectionClick(AboutPageId);\n                                    }, 250);\n                                }}\n                               \n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                publication\n                    \n                            </Button>\n                    \n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={currentPage === WorkPageId ? \"primary.500\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"underline\"\n                                onClick={() => {\n                                    onClose();\n                                    setTimeout(() => {\n                                        onSectionClick(WorkPageId);\n                                    }, 250);\n                                }}\n                                \n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                               \n                            >\n                                project\n                            </Button>\n\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={currentPage === ExperienceId ? \"primary.500\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"underline\"\n                                onClick={() => {\n                                    onClose();\n                                    setTimeout(() => {\n                                        onSectionClick(ExperienceId);\n                                    }, 250);\n                                }}\n                                \n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                               \n                            >\n                                etc.\n                            </Button>\n\n                           \n                            \n                            \n                            {/* <Button variant=\"link\" onClick={() => open(\"https://scholar.google.co.kr/citations?user=KzrZ7zAAAAAJ&hl\")} data-aos=\"fade\" data-aos-delay=\"400\">\n                                Google Scholar\n                            </Button> */}\n                        </VStack>\n                        <Flex justifyContent=\"center\" mt=\"10\">\n                            <Socials delay={100} resume={false} />\n                            \n                        </Flex>\n                        <Flex justifyContent=\"center\">\n                        <Button\n                                mt=\"5\"\n                                variant=\"link\"\n                                 color={navItemColor}\n                                // onClick={onResumeOpen}\n                                onClick={() => open(\"https://drive.google.com/file/d/1tKVRW-EnVgFAqBj5R4xdlmxY7_1wtTvE/view?usp=sharing\")}\n                               \n                                fontWeight=\"600\"\n                                fontSize=\"m\"\n                              \n                            >\n                                🔗 Curriculum Vitae (PDF)\n                            </Button>\n                        </Flex>\n\n                        \n                    </DrawerBody>\n                </DrawerContent>\n            </Drawer>\n        </Box>\n    );\n};\n","import { FC } from \"react\";\n\nimport { Box, Button, Container, Flex, HStack, useColorModeValue, Text, WrapItem, Tooltip } from \"@chakra-ui/react\";\n\nimport { configs } from \"shared/content/Content\";\nimport { LogoType } from \"shared/navbar/logo-type/LogoType\";\nimport { bgDark, bgLight } from \"theme\";\nimport { onResumeOpen } from \"utils/Functions\";\nimport { AboutPageId, useScroll, WorkPageId, HomeId, ExperienceId } from \"utils/useScroll\";\nimport { MenuDrawer } from \"./drawer/Drawer\";\nimport { ColorModeButton } from \"shared/color-mode-button/ColorModeButton\";\n\nexport const open = (link: string) => window.open(link, \"_blank\");\nexport const Navbar: FC = () => {\n    const bg = useColorModeValue(bgLight, bgDark);\n    const inactiveColor = useColorModeValue(\"gray.500\", \"gray.400\");\n    \n    const navItemColor = useColorModeValue(\"gray.800\", \"white\");\n    const currentPage = useScroll();\n\n    const toSection = (section: string, offset=75) => {\n        const element = document.getElementById(section)\n        if (element) {\n            const elementPosition = element.getBoundingClientRect().top + window.scrollY;\n            const targetPosition = elementPosition - offset;\n            window.scrollTo({ top: targetPosition, behavior: \"smooth\" });\n        }\n    };\n\n    // const toSection = (section: string) => {\n    //     document.getElementById(section)?.scrollIntoView({ behavior: \"smooth\" });\n    // };\n\n    return (\n        <Box bg={useColorModeValue(\"gray.50\", \"gray.700\")} boxShadow=\"lg\" position=\"fixed\" top=\"0\" w=\"100%\" left=\"50%\" transform=\"translate(-50%)\" zIndex=\"10\" borderBottomWidth='1px'>\n            <Container py=\"3\" px=\"3\" data-aos=\"fade-down\" data-aos-duration=\"500\" data-aos-delay=\"100\">\n                <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                    <LogoType text={configs.common.logoType} /> \n\n                    \n                    <Flex alignItems=\"center\" display={{ base: \"none\", md: \"flex\" }}>\n                        <HStack spacing=\"8\" mr=\"6\">\n                        \n                        <Button\n                                variant=\"link\"\n                                color={useColorModeValue(\"gray.700\", \"gray.50\")}\n                                textDecoration={currentPage === HomeId ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                onClick={() => toSection(HomeId)}\n                               \n                                fontSize=\"20px\"\n                               \n                            >\n                                about\n                            </Button>\n\n                            \n                    \n                                    <Button\n                                        variant=\"link\"\n                                        color={useColorModeValue(\"gray.700\", \"gray.50\")}\n                                        textDecoration={currentPage === AboutPageId ? \"underline\" : \"none\"}\n                                        textDecorationThickness=\"2px\"\n                                        textDecorationColor=\"primary.500\"\n                                        onClick={() => toSection(AboutPageId) }\n                                        \n                                        fontSize=\"20px\"\n                                    >\n                                        publication\n                                    </Button>\n                               \n                            \n                            <Button\n                                variant=\"link\"\n                                \n                                color={useColorModeValue(\"gray.700\", \"gray.50\")}\n                                textDecorationThickness=\"2px\"\n                                textDecoration={currentPage === WorkPageId ? \"underline\" : \"none\"}\n                                onClick={() => toSection(WorkPageId)}\n                                textDecorationColor=\"primary.500\"\n                                \n                                fontSize=\"20px\"\n                            >\n                                project\n                            </Button>\n\n                            <Button\n                                variant=\"link\"\n                              \n                                textDecorationThickness=\"2px\"\n                                color={useColorModeValue(\"gray.700\", \"gray.50\")}\n                                textDecoration={currentPage === ExperienceId ? \"underline\" : \"none\"}\n                                onClick={() => toSection(ExperienceId)}\n                                textDecorationColor=\"primary.500\"\n                                \n                                fontSize=\"20px\"\n                            >\n                                etc.\n                            </Button>\n\n                            {/* <Button variant=\"link\" onClick={() => open(\"https://drive.google.com/file/d/1tKVRW-EnVgFAqBj5R4xdlmxY7_1wtTvE/view?usp=sharing\")} \n                            fontSize=\"23px\"\n                                fontFamily=\"Tiny5\">\n                                CURRICULUM VITAE\n                            </Button> */}\n                            \n                            {/* <Button variant=\"link\" onClick={onResumeOpen} data-aos=\"fade\" data-aos-delay=\"400\">\n                                Resume\n                            </Button> */}\n                        </HStack>\n                        <ColorModeButton />\n                    </Flex>\n\n                    <MenuDrawer\n                        currentPage={currentPage}\n                        onSectionClick={toSection}\n                        display={{ base: \"block\", md: \"none\" }}\n                    />\n                </Flex>\n            </Container>\n        </Box>\n    );\n};\n","import { FC } from \"react\";\n\nimport { Button, HStack, IconButton, Tooltip } from \"@chakra-ui/react\";\n\nimport { configs } from \"shared/content/Content\";\nimport { onResumeOpen, open } from \"utils/Functions\";\nimport { FacebookIcon, GitHubIcon, InstagramIcon, LinkedInIcon, MailIcon, YoutubeIcon, ScholarIcon } from \"utils/Icons\";\n\nconst LinksToIconMapper: Record<string, JSX.Element> = {\n    linkedin: <LinkedInIcon />,\n    github: <GitHubIcon />,\n    facebook: <FacebookIcon />,\n    instagram: <InstagramIcon />,\n    youtube: <YoutubeIcon />,\n    mail: <MailIcon />,\n    google_scholar: <ScholarIcon/>,\n};\n\ninterface Props {\n    resume?: boolean;\n    exclude?: Array<string>;\n    delay?: number;\n}\n\nexport const Socials: FC<Props> = ({ resume = true, exclude, delay = 800 }) => {\n    return (\n        <HStack spacing=\"3\">\n            {resume && (\n                <Button data-aos=\"fade\" data-aos-delay={delay} size=\"lg\" borderRadius=\"xl\" mr=\"2\" onClick={onResumeOpen}>\n                    Resume\n                </Button>\n            )}\n            {configs.common.socials.map(\n                (social, idx) =>\n                    !exclude?.includes(social.type) && (\n                        <Tooltip key={social.type} label={social.type} textTransform=\"capitalize\">\n                            <Button\n                                p=\"0\"\n                                aria-label={`${social.type}-button`}\n                                as={IconButton}\n                                variant=\"icon\"\n                                fontSize={social.type === \"mail\" ? \"24pt\" : \"20pt\"}\n                                icon={LinksToIconMapper[social.type]}\n                                onClick={() => open(social.link)}\n                            />\n                        </Tooltip>\n                    ),\n            )}\n        </HStack>\n    );\n};\n","import { configs } from \"shared/content/Content\";\n\nexport const open = (link: string) => window.open(link, \"_blank\");\n\nexport const onResumeOpen = () => {\n    open(configs.common.resume);\n};\n\nexport const onScholarOpen = (link : string) => {\n    window.open(link, \"_blank\");\n};\n\n\n\nexport const onMailTo = () => {\n    open(\"mailto:\" + configs.common.email);\n};\n","import { useTheme } from '@chakra-ui/system';\nimport { isBrowser, __DEV__, memoizedGet, breakpoints, isArray, fromEntries, arrayToObjectNotation } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport React__default from 'react';\nimport { useEnvironment } from '@chakra-ui/react-env';\n\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nfunction useMediaQuery(query) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in env.window;\n\n  var _React$useState = React.useState(queries.map(function (query) {\n    return isSupported ? !!env.window.matchMedia(query).matches : false;\n  })),\n      matches = _React$useState[0],\n      setMatches = _React$useState[1]; // Specifying matches in the dependency list will cause the event listeners\n  // to unload and then load each time the dependency changes. This causes\n  // Media Query Events to be missed. The event listeners should only be unloaded\n  // when the component unloads.\n\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n    var listenerList = mediaQueryList.map(function (_, index) {\n      var listener = function listener(mqlEvent) {\n        var queryIndex = mediaQueryList.findIndex(function (mediaQuery) {\n          return mediaQuery.media === mqlEvent.media;\n        }); // As the event listener is on the media query list, any time the\n        // listener is called, we know there is a change. There's no need\n        // to compare the previous matches with current. Using\n        // setMatches(matches => {...}) provides access to the current matches\n        // state.  Trying to access matches outside the setMatches function\n        // would provide data from the the time of instantiation (stale).\n\n        setMatches(function (matches) {\n          var currentMatches = matches.map(function (x) {\n            return x;\n          });\n          currentMatches[queryIndex] = mqlEvent.matches;\n          return currentMatches;\n        });\n      }; // Listening to the 'change' event on the Media Query List Object\n      // is more performant as the callback is only invoked when a specified\n      // media query is matched. Using addEventListener on the window object\n      // to listen for the resize event will call the callback on every\n      // viewport resize.\n\n\n      if (typeof mediaQueryList[index].addEventListener === \"function\") {\n        mediaQueryList[index].addEventListener(\"change\", listener);\n      } else {\n        mediaQueryList[index].addListener(listener);\n      }\n\n      return listener;\n    });\n    return function () {\n      mediaQueryList.forEach(function (_, index) {\n        if (typeof mediaQueryList[index].removeEventListener === \"function\") {\n          mediaQueryList[index].removeEventListener(\"change\", listenerList[index]);\n        } else {\n          mediaQueryList[index].removeListener(listenerList[index]);\n        }\n      });\n    };\n  }, []);\n  return matches;\n}\n\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\nvar Visibility = function Visibility(props) {\n  var breakpoint = props.breakpoint,\n      hide = props.hide,\n      children = props.children;\n\n  var _useMediaQuery = useMediaQuery(breakpoint),\n      show = _useMediaQuery[0];\n\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nvar Hide = function Hide(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nvar Show = function Show(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  return memoizedGet(theme, \"breakpoints.\" + value, value);\n};\n\nfunction useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n      breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n      below = props.below,\n      above = props.above;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}\n\n/**\n * React hook used to get the user's animation preference.\n */\n\nfunction usePrefersReducedMotion() {\n  var _useMediaQuery = useMediaQuery(\"(prefers-reduced-motion: reduce)\"),\n      prefersReducedMotion = _useMediaQuery[0];\n\n  return prefersReducedMotion;\n}\n/**\n * React hook for getting the user's color mode preference.\n */\n\nfunction useColorModePreference() {\n  var _useMediaQuery2 = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"]),\n      isLight = _useMediaQuery2[0],\n      isDark = _useMediaQuery2[1];\n\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return undefined;\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param [defaultBreakpoint=\"base\"] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nfunction useBreakpoint(defaultBreakpoint // default value ensures SSR+CSR consistency\n) {\n  if (defaultBreakpoint === void 0) {\n    defaultBreakpoint = \"base\";\n  }\n\n  var _useTheme = useTheme(),\n      __breakpoints = _useTheme.__breakpoints;\n\n  var env = useEnvironment();\n  var queries = React__default.useMemo(function () {\n    var _breakpoints$details;\n\n    return (_breakpoints$details = __breakpoints == null ? void 0 : __breakpoints.details.map(function (_ref) {\n      var minMaxQuery = _ref.minMaxQuery,\n          breakpoint = _ref.breakpoint;\n      return {\n        breakpoint: breakpoint,\n        query: minMaxQuery.replace(\"@media screen and \", \"\")\n      };\n    })) != null ? _breakpoints$details : [];\n  }, [__breakpoints]);\n\n  var _React$useState = React__default.useState(function () {\n    if (defaultBreakpoint) {\n      // use default breakpoint to ensure render consistency in SSR + CSR environments\n      // => first render on the client has to match the render on the server\n      var fallbackBreakpointDetail = queries.find(function (_ref2) {\n        var breakpoint = _ref2.breakpoint;\n        return breakpoint === defaultBreakpoint;\n      });\n\n      if (fallbackBreakpointDetail) {\n        return fallbackBreakpointDetail.breakpoint;\n      }\n    }\n\n    if (env.window.matchMedia) {\n      // set correct breakpoint on first render if no default breakpoint was provided\n      var matchingBreakpointDetail = queries.find(function (_ref3) {\n        var query = _ref3.query;\n        return env.window.matchMedia(query).matches;\n      });\n\n      if (matchingBreakpointDetail) {\n        return matchingBreakpointDetail.breakpoint;\n      }\n    }\n\n    return undefined;\n  }),\n      currentBreakpoint = _React$useState[0],\n      setCurrentBreakpoint = _React$useState[1];\n\n  React__default.useEffect(function () {\n    var allUnregisterFns = queries.map(function (_ref4) {\n      var breakpoint = _ref4.breakpoint,\n          query = _ref4.query;\n      var mediaQueryList = env.window.matchMedia(query);\n\n      if (mediaQueryList.matches) {\n        setCurrentBreakpoint(breakpoint);\n      }\n\n      var handleChange = function handleChange(ev) {\n        if (ev.matches) {\n          setCurrentBreakpoint(breakpoint);\n        }\n      }; // add media query listener\n\n\n      if (typeof mediaQueryList.addEventListener === \"function\") {\n        mediaQueryList.addEventListener(\"change\", handleChange);\n      } else {\n        mediaQueryList.addListener(handleChange);\n      } // return unregister fn\n\n\n      return function () {\n        if (typeof mediaQueryList.removeEventListener === \"function\") {\n          mediaQueryList.removeEventListener(\"change\", handleChange);\n        } else {\n          mediaQueryList.removeListener(handleChange);\n        }\n      };\n    });\n    return function () {\n      allUnregisterFns.forEach(function (unregister) {\n        return unregister();\n      });\n    };\n  }, [queries, __breakpoints, env.window]);\n  return currentBreakpoint;\n}\n\nfunction getClosestValue(values, breakpoint, breakpoints$1) {\n  if (breakpoints$1 === void 0) {\n    breakpoints$1 = breakpoints;\n  }\n\n  var index = Object.keys(values).indexOf(breakpoint);\n\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n\n  var stopIndex = breakpoints$1.indexOf(breakpoint);\n\n  while (stopIndex >= 0) {\n    var key = breakpoints$1[stopIndex];\n\n    if (values[key] != null) {\n      index = stopIndex;\n      break;\n    }\n\n    stopIndex -= 1;\n  }\n\n  if (index !== -1) {\n    var _key = breakpoints$1[index];\n    return values[_key];\n  }\n\n  return undefined;\n}\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param [defaultBreakpoint] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\nfunction useBreakpointValue(values, defaultBreakpoint) {\n  var _theme$__breakpoints;\n\n  var breakpoint = useBreakpoint(defaultBreakpoint);\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Array.from(((_theme$__breakpoints = theme.__breakpoints) == null ? void 0 : _theme$__breakpoints.keys) || []);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { Hide, Show, useBreakpoint, useBreakpointValue, useColorModePreference, useMediaQuery, usePrefersReducedMotion, useQuery };\n"],"names":["LogoType","text","useBreakpointValue","base","mobile","md","desktop","useScroll","onClick","section","offset","element","document","getElementById","targetPosition","getBoundingClientRect","top","window","scrollY","scrollTo","behavior","toSection","HomeId","transition","_hover","cursor","color","fontSize","fontWeight","lineHeight","mb","ColorModeButton","props","useColorModeValue","useColorMode","colorMode","toggleColorMode","tooltipLabel","label","hasArrow","placement","bg","_active","icon","variant","size","scrollBy","w","h","MenuDrawer","onSectionClick","currentPage","useDisclosure","isOpen","onOpen","onClose","btnRef","useRef","navItemColor","as","IconButton","ref","px","autoFocus","justifyContent","position","right","spacing","my","textDecoration","textDecorationThickness","textDecorationColor","AboutPageId","setTimeout","WorkPageId","ExperienceId","mt","Socials","delay","resume","link","open","Navbar","bgLight","bgDark","elementPosition","boxShadow","left","transform","zIndex","borderBottomWidth","py","alignItems","configs","display","mr","LinksToIconMapper","linkedin","github","facebook","instagram","youtube","mail","google_scholar","exclude","borderRadius","onResumeOpen","social","idx","includes","type","textTransform","p","isBrowser","React","__DEV__","values","defaultBreakpoint","_theme$__breakpoints","breakpoint","__breakpoints","useTheme","env","useEnvironment","queries","React__default","_breakpoints$details","details","map","_ref","minMaxQuery","query","replace","_React$useState","fallbackBreakpointDetail","find","_ref2","matchMedia","matchingBreakpointDetail","_ref3","matches","currentBreakpoint","setCurrentBreakpoint","allUnregisterFns","_ref4","mediaQueryList","handleChange","ev","addEventListener","addListener","removeEventListener","removeListener","forEach","unregister","useBreakpoint","theme","breakpoints","Array","from","keys","breakpoints$1","index","Object","indexOf","stopIndex","getClosestValue","isArray","fromEntries","entries","arrayToObjectNotation"],"sourceRoot":""}