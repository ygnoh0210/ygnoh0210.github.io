{"version":3,"file":"static/js/793.cd0c2305.chunk.js","mappings":"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","sources":["../node_modules/style-to-object/index.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/@chakra-ui/layout/src/list.tsx","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/extend/index.js","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/inline-style-parser/index.js","../node_modules/react-markdown/node_modules/react-is/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/unified/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-definitions/lib/index.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/unist-util-generated/lib/index.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/react-markdown/lib/rehype-filter.js","../node_modules/hast-util-whitespace/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/index.mjs","../node_modules/react-markdown/lib/uri-transformer.js","../node_modules/react-markdown/lib/ast-to-react.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/react-markdown/lib/react-markdown.js","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","../node_modules/prop-types/index.js","../node_modules/is-buffer/index.js","../node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","../node_modules/@chakra-ui/layout/src/link.tsx"],"sourcesContent":["var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport type {\n  HTMLChakraProps,\n  SystemProps,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [ListStylesProvider, useListStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `,\n})\n\nexport { useListStyles }\n\ninterface ListOptions {\n  /**\n   * Shorthand prop for `listStyleType`\n   * @type SystemProps[\"listStyleType\"]\n   */\n  styleType?: SystemProps[\"listStyleType\"]\n  /**\n   * Shorthand prop for `listStylePosition`\n   * @type SystemProps[\"listStylePosition\"]\n   */\n  stylePosition?: SystemProps[\"listStylePosition\"]\n  /**\n   * The space between each list item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nexport interface ListProps\n  extends HTMLChakraProps<\"ul\">,\n    ThemingProps<\"List\">,\n    ListOptions {}\n\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/list\n */\nexport const List = forwardRef<ListProps, \"ul\">(function List(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props)\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {}\n\n  return (\n    <ListStylesProvider value={styles}>\n      <chakra.ul\n        ref={ref}\n        listStyleType={styleType}\n        listStylePosition={stylePosition}\n        /**\n         * We added this role to fix the Safari accessibility issue with list-style-type: none\n         * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n         */\n        role=\"list\"\n        __css={{ ...styles.container, ...spacingStyle }}\n        {...rest}\n      >\n        {validChildren}\n      </chakra.ul>\n    </ListStylesProvider>\n  )\n})\n\nList.displayName = \"List\"\n\nexport const OrderedList = forwardRef<ListProps, \"ol\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ol\" styleType=\"decimal\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nOrderedList.displayName = \"OrderedList\"\n\nexport const UnorderedList = forwardRef<ListProps, \"ul\">(function UnorderedList(\n  props,\n  ref,\n) {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ul\" styleType=\"initial\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nUnorderedList.displayName = \"UnorderedList\"\n\nexport interface ListItemProps extends HTMLChakraProps<\"li\"> {}\n\n/**\n * ListItem\n *\n * Used to render a list item\n */\nexport const ListItem = forwardRef<ListItemProps, \"li\">(function ListItem(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <chakra.li ref={ref} {...props} __css={styles.item} />\n})\n\nListItem.displayName = \"ListItem\"\n\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\nexport const ListIcon = forwardRef<IconProps, \"svg\">(function ListIcon(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <Icon ref={ref} role=\"presentation\" {...props} __css={styles.icon} />\n})\n\nListIcon.displayName = \"ListIcon\"\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface LinkProps extends HTMLChakraProps<\"a\">, ThemingProps<\"Link\"> {\n  /**\n   *  If `true`, the link will open in new tab\n   *\n   * @default false\n   */\n  isExternal?: boolean\n}\n\n/**\n * Links are accessible elements used primarily for navigation.\n *\n * It integrates well with other routing libraries like\n * React Router, Reach Router and Next.js Link.\n *\n * @example\n *\n * ```jsx\n * <Link as={ReactRouterLink} to=\"/home\">Home</Link>\n * ```\n *\n * @see Docs https://chakra-ui.com/link\n */\nexport const Link = forwardRef<LinkProps, \"a\">(function Link(props, ref) {\n  const styles = useStyleConfig(\"Link\", props)\n  const { className, isExternal, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.a\n      target={isExternal ? \"_blank\" : undefined}\n      rel={isExternal ? \"noopener\" : undefined}\n      ref={ref}\n      className={cx(\"chakra-link\", className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nLink.displayName = \"Link\"\n"],"names":["parse","require","StyleToObject","style","iterator","declaration","output","property","value","declarations","hasIterator","i","len","length","module","exports","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","props","propName","componentName","location","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","ListStylesProvider","useListStyles","createContext","errorMessage","List","forwardRef","ref","styles","useMultiStyleConfig","omitThemingProps","children","styleType","stylePosition","spacing","rest","validChildren","getValidChildren","selector","spacingStyle","mt","chakra","ul","listStyleType","listStylePosition","role","__css","container","displayName","as","marginStart","UnorderedList","ListItem","li","item","Icon","icon","hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","enumerable","configurable","newValue","writable","getProperty","extend","src","copy","copyIsArray","clone","arguments","deep","Text","useStyleConfig","className","align","decoration","casing","aliasedProps","compact","textAlign","textDecoration","textTransform","p","cx","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","Position","whitespace","this","end","source","content","errorsList","error","msg","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","prop","val","ret","decl","decls","stringifyPosition","point","index","VFileMessage","place","origin","parts","super","undefined","indexOf","message","stack","fatal","ruleId","file","actual","expected","url","note","path","basename","ext","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","joined","segments","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","bufferLike","buffer","data","messages","history","stored","map","includes","assertNonEmpty","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","fn","middleware","called","wrapped","parameters","fnExpectsCallback","done","apply","then","wrap","use","middelware","unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","add","plugin","plugins","entry","isPlainObj","doc","vfile","assertParser","newable","String","assertCompiler","assertNode","compile","Promise","executor","resolve","reject","tree","runSync","complete","assertDone","process","isBuffer","processSync","destination","keys","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","all","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","document","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","disable","null","blankLine","after","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","text","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","toLowerCase","toUpperCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","character","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","title","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","d","combined","remarkParse","normalizeUri","skip","encodeURIComponent","convert","castFactory","typeFactory","tests","checks","anyFactory","propsFactory","CONTINUE","EXIT","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","concat","parent","pointStart","pointEnd","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","codePointAt","handlers","blockquote","break","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","tableContent","body","tableCell","tableRow","siblings","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","Schema","normal","space","merge","Info","attribute","boolean","booleanish","overloadedBoolean","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","types","DefinedInfo","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","writingSuggestions","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","thing","valid","dash","cap","kebab","camelcase","hastToReact","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","schema","addProperty","listDepth","component","components","basic","React","ReactIs","linkTarget","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","dashes","find","padRight","padLeft","commas","v","styleReplacer","parseStyle","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehype","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","u","b","for","e","f","g","h","l","n","q","t","a","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","Link","isExternal"],"sourceRoot":""}