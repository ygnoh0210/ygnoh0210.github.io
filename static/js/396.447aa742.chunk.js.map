{"version":3,"file":"static/js/396.447aa742.chunk.js","mappings":"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","sources":["shared/content/Content.tsx","shared/tags/Tags.tsx","shared/socials/Socials.tsx","pages/research/Research.tsx","shared/tags/HighlightTag.tsx","pages/about/updates/Updates.tsx","pages/about/About.tsx","utils/Functions.ts"],"sourcesContent":["import { FC, useEffect, useState } from \"react\";\n\nimport { Text, Stack, StyleProps, Link, UnorderedList } from \"@chakra-ui/react\";\nimport ReactMarkdown from \"react-markdown\";\n\nimport common from \"content/common/common.json\";\nimport landing from \"content/landing/landing-config.json\";\nimport featuredProjects from \"content/featured-projects/featured-projects-config.json\";\nimport otherProjects from \"content/other-projects/other-projects-config.json\";\nimport about from \"content/about/about-config.json\";\n\nimport LandingMd from \"content/landing/landing.md\";\nimport AboutMd from \"content/about/about.md\";\n\nexport const configs = {\n    common,\n    landing,\n    featuredProjects,\n    otherProjects,\n    about,\n};\n\ninterface State {\n    landing: string;\n    about: string;\n}\n\nexport enum MarkdownFile {\n    Landing = \"landing\",\n    About = \"about\",\n}\n\nconst Mapper = {\n    [MarkdownFile.Landing]: LandingMd,\n    [MarkdownFile.About]: AboutMd,\n};\n\nexport const useContent = (fileName: MarkdownFile) => {\n    const [data, setData] = useState<State>({ landing: \"\", about: \"\" });\n\n    useEffect(() => {\n        fetch(Mapper[fileName])\n            .then((res) => res.text())\n            .then((text) => setData((data) => ({ ...data, [fileName]: text })));\n    }, [fileName]);\n\n    return data;\n};\n\ninterface Props extends StyleProps {\n    children?: string;\n}\n\nexport const Content: FC<Props> = ({ children, ...rest }) => {\n    return (\n        <Stack spacing=\"0\">\n            <ReactMarkdown\n                components={{\n                    p: ({ node, ...props }) => <Text {...rest} {...props} />,\n                    a: ({ node, ...props }) => (\n                        <Link href={props.href} target=\"_blank\" color=\"primary.700\" {...props} />\n                    ),\n                    ul: ({ node, ...props }) => {\n                        const { ordered, ...rest } = props;\n\n                        return (\n                            <UnorderedList\n                                {...rest}\n                                data-aos=\"fade\"\n                                listStylePosition=\"inside\"\n                                display=\"grid\"\n                                gridTemplateColumns=\"repeat(2, 1fr)\"\n                                listStyleType=\"'‣ '\"\n                                fontWeight=\"500\"\n                            />\n                        );\n                    },\n                    li: ({ node, ...props }) => {\n                        const { ordered, ...rest } = props;\n\n                        return <li data-aos=\"flip-up\" data-aos-delay={props.index * 100 + 400} {...rest} />;\n                    },\n                }}\n            >\n                {children as string}\n            </ReactMarkdown>\n        </Stack>\n    );\n};\n","import { FC } from \"react\";\n\nimport { Flex, Box, Badge, ColorHues } from \"@chakra-ui/react\";\n\n\n\ninterface Props {\n    id?: string;\n    tags: Array<string>;\n    size?: string;\n    delay?: number;\n}\n\nexport const Tags: FC<Props> = ({ id, tags, size = \"md\" }) => { \n    return (\n        <Flex py=\"1\" wrap=\"wrap\" gap=\"1\">\n            {tags.map((tag, idx) => (\n                <Box data-aos=\"flip-left\" data-aos-delay={idx * 50} key={`${id}-tag-${tag}`}>\n                    <Badge\n                        transition=\"0.2s ease-in-out\"\n                        transitionProperty=\"primary.50, color\"\n                        // _hover={{ color: \"white\", bg: \"primary.200\" }}\n                        textTransform=\"none\"\n                        // variant='solid'\n                        // colorScheme=\"default\"\n                        color=\"g\"\n                        borderRadius=\"md\"\n                        px=\"8px\"\n                        py=\"1px\"\n                        fontSize={size}\n                        fontWeight=\"600\"\n                    >\n                        {tag}\n                    </Badge>\n                </Box>\n            ))}\n        </Flex>\n    );\n};\n","import { FC } from \"react\";\nimport { Button, HStack, IconButton, Tooltip, VStack, Text, useColorModeValue } from \"@chakra-ui/react\";\n\nimport { configs } from \"shared/content/Content\";\nimport { onResumeOpen, open } from \"utils/Functions\";\nimport { FacebookIcon, GitHubIcon, InstagramIcon, LinkedInIcon, MailIcon, YoutubeIcon, ScholarIcon, CVIcon } from \"utils/Icons\";\n\nconst LinksToIconMapper: Record<string, JSX.Element> = {\n    linkedin: <LinkedInIcon />,\n    github: <GitHubIcon />,\n    facebook: <FacebookIcon />,\n    instagram: <InstagramIcon />,\n    youtube: <YoutubeIcon />,\n    mail: <MailIcon />,\n    google_scholar: <ScholarIcon />,\n    curriculum_vitae:<CVIcon/>\n};\n\ninterface Props {\n    resume?: boolean;\n    exclude?: Array<string>;\n    delay?: number;\n}\n\nexport const Socials: FC<Props> = ({ resume = true, exclude, delay = 800 }) => {\n    const textColor = useColorModeValue(\"black.600\", \"black.300\"); \n    return (\n        <VStack  align=\"start\">\n            {resume && (\n                <Button data-aos=\"fade\" data-aos-delay={delay} size=\"lg\" borderRadius=\"xl\" onClick={onResumeOpen}>\n                    Resume\n                </Button>\n            )}\n\n            {configs.common.socials.map(\n                (social) =>\n                    !exclude?.includes(social.type) && (\n                        // <Tooltip key={social.type} label={social.type} textTransform=\"capitalize\">\n                            <HStack\n                                // spacing={3}\n                                as=\"button\"\n                                onClick={() => open(social.link)}\n                                aria-label={`${social.type}-button`}\n                            >\n                                <IconButton\n                                    boxSize=\"13px\" \n                \n                                    p=\"0\"\n                                    variant=\"icon\"\n                                    aria-label={`${social.type}-icon`}\n                                    icon={LinksToIconMapper[social.type]}\n                                    fontSize={social.type === \"mail\" ? \"16pt\" : \"14pt\"}\n                                />\n                                <Text fontSize=\"14\" fontWeight=\"700\" color={textColor} textTransform=\"capitalize\">\n                                    {social.type === \"curriculum_vitae\"? \"CV (PDF)\"    : social.type.replace(\"_\", \" \")}\n    </Text>\n                            </HStack>\n                        // </Tooltip>\n                    )\n            )}\n        </VStack>\n    );\n};\n","import { FC, useEffect, useRef, useState } from \"react\";\nimport { Tags } from \"shared/tags/Tags\";\nimport { ExIcon } from \"utils/Icons\";\nimport { useColorModeValue, Flex} from \"@chakra-ui/react\";\n\nimport {\n  Box,\n  Center,\n  Image,\n  Heading,\n  Text,\n  HStack,\n  Progress,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Button,\n  useDisclosure,\n  Badge,\n  Tooltip\n} from \"@chakra-ui/react\";\n\nimport { PreviousIcon, NextIcon } from \"utils/Icons\";\nimport { Tags_second } from \"shared/tags/Tags_second\";\n\ninterface CardItem {\n  id?: string;\n  title: string;\n  description: string;\n  image: string;\n  abstract: string;\n  link?: string;\n  paper?: string;\n  date?: string;\n  tags?: string[];\n  conference?: string;\n}\n\nconst cardData: CardItem[] = [\n  {\n    id: \"1\",\n    title: \"BIASsist : Bias Assistive Tool\",\n    description: \"An LLM-based approach to mitigate bias expression\",\n    image: \"/assets/publication_img/9Publi.png\",\n    conference: \"CHI '25\",\n    link:\"https://doi.org/10.1145/3706598.3713531\",\n    paper:\"BIASsist: Empowering News Readers via Bias Identification, Explanation, and Neutralization\",\n    date:\"Oct.2024-Aug.2025\",\n    tags:[\"bias\", \"news article\", \"assistive tool\", \"LLM-powered application\"],\n    abstract:\"Biased news articles can distort readers’ perceptions by presenting information in a way that favors or disfavors a particular point of view. Subtly embedded in the text, these biased news articles can shape our views daily without people even realizing it. To address this issue, we propose BIASsist, an LLM-based approach designed to mitigate bias in news articles. Based on existing research, we defined six types of bias and introduced three assistive components—identification, explanation, and neutralization—to provide a broader range of bias information and enhance readers’ bias-awareness. We conducted a mixed-method study with 36 participants to evaluate the effectiveness of BIASsist. The results show participants’ bias awareness significantly improved and their interest in identifying bias increased. Participants also tended to engage more actively in critically evaluating articles. Based on these findings, we discuss its potential to improve media literacy and critical thinking in today’s information overload era.\"\n  \n  },\n  {\n    id: \"2\",\n    title: \"Conversational Agent for Dementia\",\n    description: \"Conversational agents for personalized reminiscence.\",\n    image: \"/assets/publication_img/7Publi.png\",\n    conference: \"UbiComp Companion\",\n    link:\"https://doi.org/10.1145/3675094.3678377\",\n    paper:\"Know Me Inside-Out: Conversational and Quiz-Based System for Reminiscence Therapy for People with Dementia\",\n    date:\"Sep.2023-Sep.2024\",\n    tags:[\"people with dementia (PwD)\", \"reminiscence therapy\",\"personalized dialog\"],\n    abstract:\"Dementia, marked by progressive memory decline, threatens patients' emotional well-being and sense of identity. This study explores using reminiscence therapy, which leverages past experiences for cognitive and emotional support, addressing challenges like lack of therapist's personal memorabilia and privacy issues in group sessions. We propose a language model-based interactive system that collects and structures patient memories into context-aware quizzes using named-entity recognition, question-generation, and sentiment analysis. A pilot study with 11 dementia patients aged 60-85 evaluated the system's feasibility and effectiveness. Interface usability challenges were noted, highlighting the need for further development to enhance system usability and validate its effectiveness in larger clinical settings.\"\n  },\n  {\n    id: \"3\",\n    title: \"Gaze Identification\",\n    description: \"Authentication using pre-attentive gaze patterns.\",\n    image: \"/assets/publication_img/8Publi.png\",\n    conference:\"Scientific Data\",\n    date:\"Mar.2023-Aug.2024\",\n    tags: [\"gaze-based authentication\", \"pre-attentive processing\"],\n    link:\"https://doi.org/10.1038/s41597-025-04538-3\",\n    paper:\"Pre-AttentiveGaze: gaze-based authentication dataset with momentary visual interactions\",\n    abstract:\"This manuscript presents a Pre-AttentiveGaze dataset. One of the defining characteristics of gaze-based authentication is the necessity for a rapid response. In this study, we constructed a dataset for identifying individuals through eye movements by inducing “pre-attentive processing” in response to a given gaze stimulus in a very short time. A total of 76,840 eye movement samples were collected from 34 participants across five sessions. From the dataset, we extracted the gaze features proposed in previous studies, pre-processed them, and validated the dataset by applying machine learning models. This study demonstrates the efficacy of the dataset and illustrates its potential for use in gaze-based authentication of visual stimuli that elicit pre-attentive processing.\"\n  },\n  {\n    id: \"4\",\n    title: \"Music for the Deaf\",\n    description: \"Transforming sound into vibrotactile feedback.\",\n    image: \"/assets/publication_img/6Publi.png\",\n    link:\"https://doi.org/10.1145/3613904.3642665\",\n    paper:\"A Way for Deaf and Hard of Hearing People to Enjoy Music by Exploring and Customizing Cross-modal Music Concepts\",\n    conference:\"CHI '24\",\n    date:\"Jun.2021-Dec.2023\",\n    tags:[\"deaf and hard-of-hearing (DHH)\", \"music appreciation\", \"music-sensory substitution system\", \"conceptualization\"],\n    abstract:\"Deaf and hard of hearing (DHH) people enjoy music and access it using a music-sensory substitution system that delivers sound together with the corresponding visual and tactile feedback. However, it is often challenging for them to comprehend the colorful visuals and strong vibrations that are designed to represent music. We confirmed that it is necessary to conceptualize cross-modal mapping before experiencing music sensory substitution through focus group interviews with 24 DHH people. To improve the music appreciation experience, a cross-modal music conceptualization system was implemented herein, which is a prototype that allows DHH people to explore the visuals and vibrations associated with music to perceive and appreciate. An evaluation with 28 DHH individuals demonstrated the capability of the system to improve subjective music appreciation experience via music-sensory substitution. Eventually, DHH people with negative attitudes toward music became positive in the exploration and customization process with our system.\"\n  },\n  {\n    id: \"5\",\n    title: \"Conversational Agent in Museum\",\n    description: \"Designing reenacted CAs to enhance museum experience\",\n    image: \"/assets/publication_img/2Publi.png\",\n    link:\"https://doi.org/10.3390/app11167420\",\n    paper:\"Designing Reenacted Chatbots to Enhance Museum Experience\",\n    conference:\"Applied Sciences\",\n    date:\"Jun.2019-Sep.2020\",\n    tags:[\"chatbot\", \"embodiment\", \"historical reenactment\", \"learning style\", \"museum experience\"],\n    abstract:\"The increased availability of chatbots has drawn attention and interest to the study of what answers they provide and how they provide them. Chatbots have become a common sight in museums but are limited to answering only simple and basic questions. Based on the observed potential of chatbots for history education in museums, we investigate how chatbots impact history education and improve the overall experience according to their appearance and language style. For this, we built three models, designed by factors on embodiment and reflection, and 60 sets of answer–questions, designed for the National Museum of Korea. We conducted a study with a total of 34 participants and carried out a variety of analyses covering individual learning styles, museum experience scales, gaze data, in-depth interviews and observations from researchers. We present various results and lessons regarding the effect of embodiment and reflection on the museum experience. Our findings show how people with different learning styles connect with chatbot models and how visitors’ behavior in the museum changes depending on the chatbot model. Specifically, the chatbot model equipped with embodiment and reflection shows its superiority in enhancing the museum experience, in general.\"\n  },\n];\n\nexport const Research: FC = () => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [progress, setProgress] = useState(10);\n  const [isPaused, setIsPaused] = useState(false);\n\n  const [selectedCard, setSelectedCard] = useState<CardItem | null>(null);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const duration = 5000;\n  const tick = 20;\n  const steps = duration / tick;\n\n  useEffect(() => {\n    if (!isPaused) {\n      intervalRef.current = setInterval(() => {\n        setProgress((prev) => {\n          if (prev >= 100) {\n            goToNext();\n            return 10;\n          }\n          return prev + 100 / steps;\n        });\n      }, tick);\n    }\n\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, [currentIndex, isPaused]);\n\n  const goToPrevious = () => {\n    setCurrentIndex((prev) => (prev === 0 ? cardData.length - 1 : prev - 1));\n    setProgress(10);\n  };\n\n  const goToNext = () => {\n    setCurrentIndex((prev) => (prev + 1) % cardData.length);\n    setProgress(10);\n  };\n\n  const handleSelect = (index: number) => {\n    setCurrentIndex(index);\n    setProgress(10);\n  };\n\n  const handleCardClick = (card: CardItem) => {\n    setSelectedCard(card);\n    onOpen();\n  };\n\n  return (\n    <Box w=\"100%\" maxW=\"800px\" mx=\"auto\" textAlign=\"center\">\n      <Box position=\"relative\" height=\"420px\" overflow=\"hidden\">\n        {cardData.map((card, index) => {\n          const isCurrent = index === currentIndex;\n          const isLeft =\n            index === (currentIndex - 1 + cardData.length) % cardData.length;\n          const isRight = index === (currentIndex + 1) % cardData.length;\n\n          const display = isCurrent || isLeft || isRight ? \"block\" : \"none\";\n          const scale = isCurrent ? 1 : 0.9;\n          const zIndex = isCurrent ? 2 : 1;\n          const opacity = isCurrent ? 1 : 0.5;\n          const offsetX = isLeft ? \"-60%\" : isRight ? \"60%\" : \"0\";\n\n          return (\n            <Box\n              key={card.id}\n              onClick={() => handleCardClick(card)}\n              cursor=\"pointer\"\n              position=\"absolute\"\n              top=\"0\"\n              left=\"50%\"\n              transform={`translateX(-50%) translateX(${offsetX}) scale(${scale})`}\n              transition=\"all 0.5s ease-in-out\"\n              zIndex={zIndex}\n              opacity={opacity}\n              display={display}\n              w=\"100%\"\n              maxW=\"600px\"\n            >\n              <Box\n                borderWidth=\"1px\"\n                borderRadius=\"lg\"\n                overflow=\"hidden\"\n                boxShadow=\"lg\"\n                bg=\"white\"\n                p={4}\n              >\n                <Box\n                position=\"absolute\"\n                top=\"0\"\n                right=\"0\"\n                p={2}\n                zIndex={3}\n              >\n                <ExIcon color=\"black\" style={{ width: \"24px\", height: \"24px\" }} />\n                \n              </Box>\n                <Center h=\"200px\">\n                  <Image\n                    src={card.image}\n                    alt={card.title}\n                    maxH=\"100%\"\n                    maxW=\"100%\"\n                    objectFit=\"contain\"\n                  />\n                </Center>\n                {/* <Heading color=\"black\" fontSize=\"xl\" mt={4}>\n                  {card.title}\n                </Heading>\n                <Text mt={2} color=\"gray.600\">\n                  {card.description}\n                </Text> */}\n                <Flex gap={1} justify=\"flex-start\" align=\"flex-start\" w=\"full\">\n                <Text\n                  as=\"h2\"\n                  fontSize=\"m\"\n                  fontWeight=\"bold\"\n                  noOfLines={2}\n                  textAlign=\"left\"   // ← 상위의 center를 덮어씀\n                >\n                  {card.paper}\n                </Text>\n              </Flex>\n            \n            <Flex gap={1} align=\"center\">\n                {/* {project.recent === \"yes\" && <Box as=\"span\" bg=\"teal.500\" color=\"white\" px=\"2\" py=\"0.5\" borderRadius=\"full\" fontSize=\"xs\">New</Box>} */}\n              \n                {card.date && <Text fontSize=\"sm\" color=\"gray.500\" fontWeight=\"bold\">{card.date}, </Text>}\n                {card.conference && <Text fontSize=\"sm\" color=\"gray.500\" fontWeight=\"bold\">{card.conference}</Text>}\n                \n              </Flex>\n\n              \n              {card?.tags && card.tags.length > 0 && (\n              <Box mb={4}>\n                <Tags tags={card.tags} size=\"xs\"/>\n              </Box>\n            )}\n              \n              </Box>\n            </Box>\n          );\n        })}\n\n        <Box\n          as=\"button\"\n          onClick={goToPrevious}\n          position=\"absolute\"\n          left=\"0\"\n          top=\"40%\"\n          transform=\"translateY(-50%)\"\n          zIndex={3}\n          w=\"50px\"\n          h=\"80px\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius=\"full\"\n          _hover={{ bg: \"gray.100\" }}\n        >\n          <PreviousIcon color=\"black\" style={{ width: \"40px\", height: \"40px\" }} />\n        </Box>\n\n        <Box\n          as=\"button\"\n          onClick={goToNext}\n          position=\"absolute\"\n          right=\"0\"\n          top=\"40%\"\n          transform=\"translateY(-50%)\"\n          zIndex={3}\n          w=\"50px\"\n          h=\"80px\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderRadius=\"full\"\n          _hover={{ bg: \"gray.100\" }}\n        >\n          <NextIcon color=\"black\" style={{ width: \"40px\", height: \"40px\" }} />\n        </Box>\n      </Box>\n\n      <HStack mt=\"-50\" spacing={2} justify=\"center\">\n        {cardData.map((_, index) => (\n          <Box\n            key={index}\n            w=\"80px\"\n            cursor=\"pointer\"\n            onClick={() => handleSelect(index)}\n          >\n            <Progress\n              \n              size=\"xs\"\n              colorScheme={index === currentIndex ? \"blue\" : \"gray\"}\n              value={\n                index === currentIndex ? progress : index < currentIndex ? 100 : 0\n              }\n              borderRadius=\"full\"\n              transition=\"all 0.2s\"\n            />\n          </Box>\n        ))}\n      </HStack>\n\n      {/* 모달 */}\n      <Modal isOpen={isOpen} onClose={onClose} isCentered size=\"l\">\n      \n  <ModalOverlay />\n  <ModalContent\n  w={{ base: \"95vw\", md: \"60vw\", lg: \"50vw\" }}\n  maxW=\"none\"\n  display=\"flex\"\n  flexDirection=\"column\"\n  maxH=\"90vh\" // 전체 높이 제한\n>\n  <ModalHeader\n    fontSize=\"20\"\n    borderBottom=\"1px solid\"\n    borderColor=\"gray.200\"\n    _dark={{ borderColor: \"gray.600\" }}\n    px={6}\n    py={4}\n    position=\"sticky\"\n    top={0}\n    bg={useColorModeValue(\"gray.50\", \"gray.800\")}\n    zIndex={1}\n    \n  >\n    {selectedCard?.paper}\n  </ModalHeader>\n\n  <ModalCloseButton />\n\n  <ModalBody\n    px={6}\n    pt={4}\n    pb={2}\n    overflowY=\"auto\"\n    flex=\"1\"\n  >\n    <Text fontSize=\"16\" fontWeight=\"700\">{selectedCard?.conference}</Text>\n\n    <Text fontSize=\"16\" fontWeight=\"700\" color=\"gray.500\" mb={1}>\n      {selectedCard?.date}\n    </Text>\n\n    {selectedCard?.tags && selectedCard.tags.length > 0 && (\n      <Box mb={4}>\n        <Tags tags={selectedCard.tags} />\n      </Box>\n    )}\n\n    <Image\n      src={selectedCard?.image}\n      alt={selectedCard?.title}\n      mb={6}\n      maxH=\"300px\"\n      mx=\"auto\"\n      objectFit=\"contain\"\n    />\n\n    <Text fontSize=\"md\" fontWeight=\"bold\" color=\"gray.700\" mb={1} _dark={{ color: \"gray.100\" }}>\n      abstract\n    </Text>\n    <Text fontSize=\"md\" color=\"gray.800\" _dark={{ color: \"gray.100\" }} mb={4}>\n      {selectedCard?.abstract}\n    </Text>\n  </ModalBody>\n\n  <ModalFooter  px={5} py={4} bg={useColorModeValue(\"gray.50\", \"gray.800\")}>\n    {selectedCard?.link && (\n      <Button\n        as=\"a\"\n        href={selectedCard.link}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        // colorScheme=\"teal\"\n        variant=\"outline\"\n        mr={3}\n        px={1}\n        py={0}\n      >\n        View Paper\n      </Button>\n    )}\n    <Button px={3} onClick={onClose}>Close</Button>\n  </ModalFooter>\n</ModalContent>\n\n</Modal>\n\n    </Box>\n  );\n};\n","// HighlightTag.tsx\nimport { Text, useColorModeValue } from \"@chakra-ui/react\";\nimport { FC, ReactNode } from \"react\";\n\nexport const HighlightTag: FC<{ children: ReactNode; color: string }> = ({ children, color }) => {\n  const bg = useColorModeValue(`${color}.100`, `${color}.900`);\n  const textColor = useColorModeValue(`${color}.800`, `${color}.50`);\n\n  return (\n    <Text\n      as=\"span\"\n      px={0.5}\n      py={0}\n      bg={bg}\n      color={textColor}\n      fontSize=\"16\" \n      fontWeight=\"semibold\"\n      whiteSpace=\"nowrap\"\n    >\n      {children}\n    </Text>\n  );\n};\n","import { FC, useState, Fragment } from \"react\"; // Fragment를 import에 추가\nimport {\n  Text,\n  Grid,\n  GridItem,\n  useColorModeValue,\n  Box,\n  Button,\n  Flex,\n  Divider\n} from \"@chakra-ui/react\";\nimport { HighlightTag } from \"shared/tags/HighlightTag\";\n\nexport const Updates: FC = () => {\n  const textColor = useColorModeValue(\"gray.700\", \"gray.200\");\n  const [expanded, setExpanded] = useState(false);\n\n  const groupedUpdates = [\n    {\n      year: \"2025\",\n      items: [\n        {\n          date: \"Sep.28\",\n          text: <>First time in <HighlightTag color=\"purple\">UIST</HighlightTag> conference in Busan</>,\n        },\n        {\n          date: \"Aug.29\",\n          text: <>Awarded <HighlightTag color=\"gray\">the NRF's 2025 Research Grant</HighlightTag> for Ph.D. (KRW 25 million, ≈ $18,000 USD) in Science and Engineering Track</>,\n        },\n        {\n          date: \"Jan.17\",\n          text: <>Our paper <Text as=\"span\" fontWeight=\"700\" >\"BIASsist: Empowering News Readers via Bias Identification, Explanation, and Neutralization\"</Text> was accepted to <HighlightTag color=\"green\">CHI</HighlightTag></>,\n        },\n        {\n          date: \"Jan.13\",\n          text: <>A paper I co-authored titled <Text as=\"span\" fontWeight=\"700\" >\"Pre-AttentiveGaze: gaze-based authentication dataset with momentary visual interactions\"</Text> was accepted to <HighlightTag color=\"green\">Scientific Data</HighlightTag></>,\n        },\n      ],\n    },\n    // ... (이하 나머지 데이터는 동일)\n    {\n      year: \"2024\",\n      items: [\n        { date: \"Oct.05\", text: <>Our paper titled <Text as=\"span\" fontWeight=\"700\" >\"Know Me Inside-Out: Conversational and Quiz-Based System for Reminiscence Therapy for People with Dementia\"</Text> was accepted at <HighlightTag color=\"green\"> UbiComp Companion</HighlightTag></> },\n        { date: \"May.10\", text: <>Joined the <HighlightTag color=\"purple\">CHI</HighlightTag> conference in Hawaii</> },\n        { date: \"Jan.15\", text: <>A paper I co-authored <Text as=\"span\" fontWeight=\"700\" >\"A Way for the Deaf and Hard of Hearing People to Enjoy Music by Exploring and Customizing Cross-modal Music Concepts\"</Text>was accepted to <HighlightTag color=\"green\">CHI</HighlightTag></> },\n      ],\n    },\n    {\n      year: \"2023\",\n      items: [\n        { date: \"Oct.15\", text: <>Visited the <HighlightTag color=\"blue\">Toronto Univ</HighlightTag> and introduced my projects</> },\n        { date: \"Oct.1\", text: <>Visited the <HighlightTag color=\"blue\">MIT</HighlightTag> in Boston and met with collaborators</> },\n        { date: \"Apr.22\", text: <>Attended the <HighlightTag color=\"purple\">CHI</HighlightTag> conference in Hamberg</> },\n      ],\n    },\n    {\n      year: \"2022\",\n      items: [\n        { date: \"Nov\", text: <>Started my <HighlightTag color=\"gray\">Ph.D journey</HighlightTag> in Human-Computer Interaction.</> },\n      ],\n    },\n    {\n      year: \"2019\",\n      items: [\n        { date: \"Feb\", text: <>Took part in <HighlightTag color=\"purple\">DeveloperWeek</HighlightTag> held in Oakland</> },\n      ],\n    },\n    {\n      year: \"2018\",\n      items: [\n        { date: \"Dec\", text: <>Started <HighlightTag color=\"blue\">Internship</HighlightTag> in Silicon Valley</> },\n      ],\n    },\n  ];\n\n  const visibleGroups = expanded ? groupedUpdates : groupedUpdates.slice(0, 2);\n\n  return (\n    <Box >\n      <Grid templateColumns=\"repeat(10, 1fr)\" gap={1} rowGap={1}>\n        {visibleGroups.map((group, groupIndex) => ( // 👈 2. map에서 index를 가져옵니다.\n          <Fragment key={group.year}>\n            {/* 연도와 항목들을 렌더링하는 부분은 그대로 둡니다. */}\n            <GridItem colSpan={1} rowSpan={group.items.length}>\n              <Text color={textColor} fontSize=\"16px\" fontWeight=\"700\">\n                {group.year}\n              </Text>\n            </GridItem>\n            {group.items.map((update, itemIndex) => (\n              <Fragment key={itemIndex}>\n                <GridItem colSpan={1}>\n                  <Text fontSize=\"16\" fontWeight=\"semibold\">{update.date}</Text>\n                </GridItem>\n                <GridItem colSpan={8}>\n                  <Text as=\"span\" fontSize=\"16\">{update.text}</Text>\n                </GridItem>\n              </Fragment>\n            ))}\n            \n            {/* 👇 3. 이 부분을 추가합니다. */}\n            {/* 현재 그룹이 마지막 그룹이 아닐 경우에만 구분선을 렌더링합니다. */}\n            {groupIndex < visibleGroups.length - 1 && (\n              <GridItem colSpan={10} pt={1}>\n                <Divider />\n              </GridItem>\n            )}\n          </Fragment>\n        ))}\n      </Grid>\n\n      {groupedUpdates.length > 3 && (\n        <Flex justify=\"flex-end\">\n          <Button\n            size=\"15px\"\n            variant=\"link\"\n            fontWeight={500}\n            color={textColor}\n            onClick={() => setExpanded(!expanded)}\n          >\n            {expanded ? \"Show less\" : \"Show more\"}\n          </Button>\n        </Flex>\n      )}\n    </Box>\n  );\n};","import { FC, useEffect, useRef, useState } from \"react\";\n import { bgDarker, bgLighter } from \"theme\";\nimport { useColorModeValue, Stack, Box, Flex, Text, Image,useDisclosure,\n    Grid,\n  GridItem,\n  Button,\n  Circle,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverFooter,\n  PopoverCloseButton,\n  Portal,\n  UnorderedList,\n  ListItem\n } from \"@chakra-ui/react\";\nimport Typed from \"typed.js\"; // Typed.js 임포트\n\nimport { Socials } from \"shared/socials/Socials\";\nimport { configs, Content, MarkdownFile, useContent } from \"shared/content/Content\";\nimport { Research } from \"pages/research/Research\";\nimport { Updates } from \"pages/about/updates/Updates\";\nimport { Skills } from \"pages/about/skills/Skills\";\nimport { Sidebar } from \"pages/sidebar/Sidebar\";\nimport { ResearchArea } from \"./research_area/ResearchArea\";\nimport { Experience } from \"./experience/Experience\";\n\n// --- 1. 데이터 배열 분리 ---\n// 학력 데이터를 컴포넌트 밖으로 분리하여 관리합니다.\nconst educationData = [\n    {\n        date: \"2022-present\",\n        degree: \"Ph.D.\",\n        major: \"GIST, AI Convergence\",\n    },\n    {\n        date: \"2019-2021\",\n        degree: \"M.S.\",\n        major: \"GIST, Integrated Technology\",\n    },\n    {\n        date: \"2015-2019\",\n        degree: \"B.A.\",\n        major: \"Handong Global University, Computer Science\",\n    },\n];\n\n// --- 2. 재사용할 EducationEntry 컴포넌트 ---\n// 타임라인의 한 항목을 렌더링하는 재사용 컴포넌트입니다.\ninterface EducationEntryProps {\n    date: string;\n    degree: string;\n    major: string;\n}\n\nconst EducationEntry: FC<EducationEntryProps> = ({ date, degree, major }) => {\n    const textColor = useColorModeValue(\"gray.700\", \"gray.200\");\n    const bulletColor = useColorModeValue(\"primary.500\", \"primary.300\");\n\n\n    return (\n        <Box position=\"relative\" mb={1}>\n            <Box\n                as=\"span\"\n                position=\"absolute\"\n                left=\"-8px\"\n                top=\"1px\"\n                w=\"0\"\n                h=\"0\"\n                borderTop=\"4px solid transparent\"\n                borderBottom=\"4px solid transparent\"\n                borderLeft={`7.5px solid ${bulletColor}`}\n            />\n            <Box pl={2}>\n              <Text fontSize=\"16\">\n                    <Box pb=\"2\" as=\"span\" fontSize=\"18\" fontWeight=\"700\" color={bulletColor}>{degree} </Box>\n                    <Box as=\"span\" fontSize=\"15\" fontWeight=\"700\" color={textColor}> {date}</Box>\n                </Text>\n               \n                <Text fontSize=\"16\" fontWeight=\"500\">{major}</Text>\n                \n            </Box>\n        </Box>\n    );\n};\n\n\n// --- 메인 About 컴포넌트 ---\nexport const About: FC = () => {\n    const content = useContent(MarkdownFile.About);\n\n      const bg = useColorModeValue(bgLighter, bgDarker);\n      const textColor = useColorModeValue(\"gray.600\", \"gray.300\");\n\n    const typedEl = useRef(null);\n    const typedColor = useColorModeValue(\"blue.600\", \"blue.400\");\n\n\n  const total = 18;\n  const data = [\n    { label: \"A+\", value: 6, color: useColorModeValue(\"#3182CE\", \"#63B3ED\") },\n    { label: \"A\", value: 7, color: useColorModeValue(\"#84B3DD\", \"#4A90E2\")},\n    { label: \"B+\", value: 5, color: useColorModeValue(\"#EBF8FF\", \"#2A4365\") },\n  ];\n  const total_2 = 11;\n  const data_2 = [\n    { label: \"A+\", value: 5, color: useColorModeValue(\"#3182CE\", \"#63B3ED\")},\n    { label: \"A\", value: 5, color: useColorModeValue(\"#84B3DD\", \"#4A90E2\")},\n    { label: \"B+\", value: 1, color: useColorModeValue(\"#EBF8FF\", \"#2A4365\") },\n  ];\n\n  const radius = 45;\n  const circumference = 2 * Math.PI * radius;\n\n  const newRadius = 58.5 - 6; // (117 / 2) - (strokeWidth / 2) = 52.5\n  const newCircumference = 2 * Math.PI * newRadius;\n\n\n  const [tooltip1, setTooltip1] = useState<{ label: string; percent: string } | null>(null);\n  const [tooltip2, setTooltip2] = useState<{ label: string; percent: string } | null>(null);\n  const { isOpen: isOpenBA, onToggle: onToggleBA } = useDisclosure();\n  const courses = [\n    \"C Programming (A+)\",\n    \"Java Programming (A+)\",\n    \"Introduction to Engineering Design (A+)\",\n    \"Programming Languages (A+)\",\n    \"Capstone Design (A+)\",\n    \"Operating Systems (A+)\",\n    \"Computer Networks (A)\",\n    \"Logic Design (A)\",\n    \"Data Structures (A)\",\n    \"Circuit Theory (A)\",\n    \"Web Service Development (A)\",\n    \"Computer Vision (A)\",\n    \"EAP Information Technology (A)\",\n    \"Computer Architecture (B+)\",\n    \"Database Systems (B+)\",\n    \"Embedded Systems Programming (B+)\",\n    \"C++ Programming (B+)\",\n    \"Algorithm Analysis (B+)\",\n  ];\n\n  const courses_2 = [\n    \"Digital Heritage Project (A+)\",\n    \"Multimodal Interaction Design (A+)\",\n    \"Intelligent Agents (A+)\",\n    \"Visual Communication (A+)\",\n    \"Idea and Digital Expression (A+)\",\n    \"Interactive Content Design (A)\",\n    \"User Experience Design (A)\",\n    \"HCI+AI: Research Trends and Technical Analysis (A)\",\n    \"Advanced Deep Learning (A)\",\n    \"Sound Design and Programming (A)\",\n    \"Human–Computer Interaction Research Methods (B+)\"\n  ];\n  const groupedCourses: Record<string, string[]> = {\n    \"A+\": [],\n    A: [],\n    \"B+\": [],\n  };\n  \n  const groupedCourses_2: Record<string, string[]> = {\n    \"A+\": [],\n    A: [],\n    \"B+\": [],\n  };\n\nconst SVG_SIZE = 120; // 90px -> 120px (30% 증가)\nconst CIRCLE_RADIUS = SVG_SIZE / 2 - 6; // 45px -> 60px - 6 = 54px (strokeWidth 12 감안)\nconst CIRCLE_CENTER = SVG_SIZE / 2; // 45px -> 60px\n  \n  courses.forEach((course) => {\n    const match = course.match(/\\((A\\+|A|B\\+)\\)$/);\n    if (match) {\n      const grade = match[1];\n      groupedCourses[grade].push(course.replace(/\\s*\\(.*\\)$/, \"\"));\n    }\n  });\n  courses_2.forEach((course) => {\n    const match = course.match(/\\((A\\+|A|B\\+)\\)$/);\n    if (match) {\n      const grade = match[1];\n      groupedCourses_2[grade].push(course.replace(/\\s*\\(.*\\)$/, \"\"));\n    }\n  });\n\n    useEffect(() => {\n        const options = {\n            strings: [\"Yeo-Gyeong Noh\", \"A HCI Researcher\", \"A Perpetual Learner\"],\n            typeSpeed: 50,\n            backSpeed: 30,\n            loop: true,\n            cursorChar: \"|\",\n            smartBackspace: true,\n            backDelay: 1500,\n        };\n\n        const typed = new Typed(typedEl.current, options);\n        return () => typed.destroy();\n    }, []);\n\n    return (\n        <Box pb=\"5\">\n            <Flex pb=\"2\" pt=\"10\" gap={{ base: 6, md: 6, lg: 12 }} direction={{ base: \"column\", md: \"row\" }}>\n                {/* 왼쪽 사이드바 영역 */}\n                <Box mt=\"5\" mr=\"5\" flex={{ base: \"initial\", md: 0.25 }}>\n                <Flex\n                    direction={{ base: \"row\", md: \"column\" }}\n                    align={{ base: \"center\", md: \"flex-start\" }}\n                    gap={{ base: 4, md: 5 }}\n                >\n                    <Image\n                    mb={{ base: 0, md: 5 }}\n                    boxSize={{ base: \"120px\", md: \"200px\" }}\n                    borderRadius=\"full\"\n                    src={configs.landing.jpg}\n                    alt=\"profile-image\"\n                    mx={{ base: 0, md: 0 }}\n                    />\n\n                    {/* Socials가 자체적으로 가로/세로 변경을 못하면, 이 Box가 자리만 잡아줘도 충분합니다 */}\n                    <Box>\n                    <Socials resume={false} />\n                    </Box>\n                </Flex>\n                </Box>\n                \n                {/* 오른쪽 메인 콘텐츠 영역 */}\n                <Box flex={{ base: 1, md: 0.75 }}>\n                    <Box>\n                        <Text pt=\"5\" mb=\"2\" fontSize=\"20px\" fontWeight=\"bold\">\n                            {\" \"}\n                            \n                            <span ref={typedEl} style={{ color: typedColor }} />\n                        </Text>\n                        <Content fontSize=\"16px\">{content.about}</Content>\n                    </Box>\n                    <Box>\n                                \n                    </Box>\n\n\n                    {/* <Flex pb=\"2\" gap={{ base: 6, md: 6, lg: 12 }} direction={{ base: \"column\", md: \"row\" }}>\n                        \n                        <Box mt=\"5\" mr=\"5\" flex={{ base: \"initial\", md: 0.5 }}>\n                            <Text pt=\"10\" mb=\"2\"fontSize=\"20px\" fontWeight=\"bold\">Research Area</Text>\n                            <ResearchArea/>\n                        </Box>\n                        <Box mt=\"5\" mr=\"5\" flex={{ base: \"initial\", md: 0.5 }}>\n                            <Text pt=\"10\" mb=\"2\"fontSize=\"20px\" fontWeight=\"bold\">Skills</Text>\n                            \n                        </Box>\n                    </Flex>\n                     */}\n                    \n\n                    <Box>\n                        <Text pt=\"10\" mb=\"2\"fontSize=\"20px\" fontWeight=\"bold\">Research Thumbnails</Text>\n                        <Research />\n                    </Box>\n\n                    <Box>\n                        <Text mt=\"5\" pt=\"10\" mb=\"2\" fontSize=\"20px\" fontWeight=\"bold\">Updates</Text>\n                        <Updates />\n                    </Box>\n\n                    <Flex pb=\"2\" pt=\"10\" gap={{ base: 6, md: 6, lg: 12 }} direction={{ base: \"column\", md: \"row\" }}>\n              \n                     <Box pt=\"5\" mb=\"1\" flex={{ base: 1, md: 0.4 }}>\n                        <Text pt=\"10\" mb=\"2\"fontSize=\"20px\" fontWeight=\"bold\">Education</Text>\n                        <Stack position=\"relative\" pl={1} borderLeft=\"2px solid #CBD5E0\">\n                            {/* --- 3. 데이터를 map으로 렌더링 --- */}\n                            {educationData.map((edu) => (\n                                <EducationEntry\n                                    key={edu.date}\n                                    date={edu.date}\n                                    degree={edu.degree}\n                                    major={edu.major}\n                                />\n                            ))}\n                        </Stack>\n                    </Box>\n\n                   \n\n                                                \n\n\n                    \n                                                <Box pt=\"3\" mb=\"6\" flex={{ base: 1, md: 0.6 }}>\n                                                            <Text pt=\"10\" mb=\"2\"fontSize=\"20px\" fontWeight=\"bold\">Academic Coursework</Text>\n                                                            {/* <Content mb=\"2\" fontSize=\"16\" fontWeight=\"600\">Academic Coursework</Content> */}\n                                                            <Flex pl=\"80px\" mt=\"5\" mb=\"5\" direction=\"row\" wrap=\"wrap\" gap={3} fontSize=\"sm\">\n                                                            {data.map((item) => (\n                                                                <Flex key={item.label} align=\"center\" gap={2}>\n                                                                <Box w=\"14px\" h=\"14px\" borderRadius=\"full\" bg={item.color} />\n                                                                <Text fontSize=\"15px\">{item.label}</Text>\n                                                                </Flex>\n                                                            ))}\n                                                            </Flex>\n\n                                                            <Grid templateColumns=\"repeat(10, 1fr)\">\n                                                            <GridItem colSpan={5} alignItems=\"center\" w=\"100%\">\n                                                                {/* 크기 변경 (90 -> 117) */}\n                                                                <Box position=\"relative\" w=\"117px\" h=\"117px\"> \n                                                                {/* 크기 변경 (90 -> 117) */}\n                                                                <svg width=\"117\" height=\"117\"> \n                                                                    {/* 중심점 변경 (45 -> 58.5) */}\n                                                                    <circle cx=\"58.5\" cy=\"58.5\" r={radius} fill=\"none\" stroke=\"#EDF2F7\" strokeWidth=\"12\" /> \n                                                                    {(() => {\n                                                                    let offset = 0;\n                                                                    return data.map((item) => {\n                                                                        const valueRatio = item.value / total;\n                                                                        \n                                                                        // circumference 변수가 새 radius(52.5) 기준으로 계산되었다고 가정\n                                                                        const strokeLength = valueRatio * circumference; \n                                                                        const strokeDasharray = `${strokeLength} ${circumference - strokeLength}`;\n                                                                        const rotation = (offset / total) * 360;\n                                                                        offset += item.value;\n                                                                        return (\n                                                                        <circle\n                                                                            key={item.label}\n                                                                            cx=\"58.5\" // 중심점 변경\n                                                                            cy=\"58.5\" // 중심점 변경\n                                                                            r={radius} // radius 변수가 52.5로 업데이트되었다고 가정\n                                                                            fill=\"none\"\n                                                                            stroke={item.color}\n                                                                            strokeWidth=\"12\"\n                                                                            strokeDasharray={strokeDasharray}\n                                                                            strokeDashoffset=\"0\"\n                                                                            // transform 기준점 변경 (45 45 -> 58.5 58.5)\n                                                                            transform={`rotate(${rotation - 90} 58.5 58.5)`} \n                                                                            onMouseEnter={() => setTooltip1({ label: item.label, percent: ((item.value / total) * 100).toFixed(1) + \"%\" })}\n                                                                            onMouseLeave={() => setTooltip1(null)}\n                                                                            style={{ cursor: \"pointer\" }}\n                                                                        />\n                                                                        );\n                                                                    });\n                                                                    })()}\n                                                                    \n                                                                </svg>\n                                                                {/* 이 Box는 'position: absolute'와 'transform'으로 자동 중앙 정렬되므로 수정 필요 없음 */}\n                                                                <Box position=\"absolute\" top=\"50%\" left=\"50%\" transform=\"translate(-50%, -50%)\" textAlign=\"center\">\n                                                                <Text fontSize=\"16px\" fontWeight=\"bold\" lineHeight=\"1.1\">\n                                                                \n                                                                Computer<br />\n                                                                Science\n                                                                </Text>\n                                                            </Box>\n\n\n                                                                {tooltip1 && (\n                                                                    <Box position=\"absolute\" top=\"0\" left=\"10%\" transform=\"translateX(10px)\" bg=\"gray.700\" color=\"white\" fontSize=\"xs\" px={2} py={1} borderRadius=\"md\" whiteSpace=\"nowrap\" pointerEvents=\"none\">\n                                                                    {tooltip1.label} {tooltip1.percent}\n                                                                    </Box>\n                                                                )}\n                                                                </Box>\n                                                                <Popover closeOnBlur={false} >\n                                                            {({ isOpen, onClose }) => (\n                                                                <>\n                                                                <PopoverTrigger>\n                                                                    <Button size=\"sm\" variant=\"link\" color={textColor}>\n                                                                    <Text fontSize=\"15\">View CS Courses</Text>\n                                                                    </Button>\n                                                                </PopoverTrigger>\n                                                                <Portal>\n                                                                    <PopoverContent fontSize=\"sm\">\n                                                                    <PopoverHeader fontWeight=\"semibold\">Computer Science Coursework</PopoverHeader>\n                                                                    <PopoverCloseButton />\n                                                                    <PopoverBody>\n                                                                    <Box>\n                                                                        {[\"A+\", \"A\", \"B+\"].map((grade) => (\n                                                                            <Box key={grade} mb={4}>\n                                                                            <Text fontWeight=\"bold\" fontSize=\"sm\" color=\"gray.600\" mb={1}>\n                                                                                {grade} Grade\n                                                                            </Text>\n                                                                            <UnorderedList spacing={1} pl={4}>\n                                                                                {groupedCourses[grade].map((course) => (\n                                                                                <ListItem key={course}>{course}</ListItem>\n                                                                                ))}\n                                                                            </UnorderedList>\n                                                                            </Box>\n                                                                        ))}\n                                                                        </Box>\n                                                                    </PopoverBody>\n                                                                    {/* <PopoverFooter>This is the footer</PopoverFooter> */}\n                                                                    </PopoverContent>\n                                                                </Portal>\n                                                                </>\n                                                            )}\n                                                            </Popover>\n                                                                \n                                                            </GridItem>\n\n                                                            <GridItem colSpan={5} w=\"100%\">\n                                                                {/* 크기 변경 (90 -> 117) */}\n                                                                <Box position=\"relative\" w=\"117px\" h=\"117px\"> \n                                                                {/* 크기 변경 (90 -> 117) */}\n                                                                <svg width=\"117\" height=\"117\"> \n                                                                    {/* 중심점 변경 (45 -> 58.5) */}\n                                                                    <circle cx=\"58.5\" cy=\"58.5\" r={radius} fill=\"none\" stroke=\"#EDF2F7\" strokeWidth=\"12\" /> \n                                                                    {(() => {\n                                                                    let offset = 0;\n                                                                    return data_2.map((item) => {\n                                                                        const valueRatio = item.value / total_2;\n\n                                                                        // circumference 변수가 새 radius(52.5) 기준으로 계산되었다고 가정\n                                                                        const strokeLength = valueRatio * circumference; \n                                                                        const strokeDasharray = `${strokeLength} ${circumference - strokeLength}`;\n                                                                        const rotation = (offset / total_2) * 360;\n                                                                        offset += item.value;\n                                                                        return (\n                                                                        <circle\n                                                                            key={item.label}\n                                                                            cx=\"58.5\" // 중심점 변경\n                                                                            cy=\"58.5\" // 중심점 변경\n                                                                            r={radius} // radius 변수가 52.5로 업데이트되었다고 가정\n                                                                            fill=\"none\"\n                                                                            stroke={item.color}\n                                                                            strokeWidth=\"12\"\n                                                                            strokeDasharray={strokeDasharray}\n                                                                            strokeDashoffset=\"0\"\n                                                                            // transform 기준점 변경 (45 45 -> 58.5 58.5)\n                                                                            transform={`rotate(${rotation - 90} 58.5 58.5)`} \n                                                                            onMouseEnter={() => setTooltip2({ label: item.label, percent: ((item.value / total_2) * 100).toFixed(1) + \"%\" })}\n                                                                            onMouseLeave={() => setTooltip2(null)}\n                                                                            style={{ cursor: \"pointer\" }}\n                                                                        />\n                                                                        );\n                                                                    });\n                                                                    })()}\n                                                                    \n                                                                </svg>\n                                                                {/* 이 Box는 'position: absolute'와 'transform'으로 자동 중앙 정렬되므로 수정 필요 없음 */}\n                                                                <Box position=\"absolute\" top=\"50%\" left=\"50%\" transform=\"translate(-50%, -50%)\" textAlign=\"center\">\n                                                                <Text fontSize=\"16\" fontWeight=\"bold\"  lineHeight=\"1.1\">\n                                                                \n                                                                Human<br />\n                                                                Computer<br/>\n                                                                Interaction\n                                                                </Text>\n                                                            </Box>\n                                                                \n                                                                {tooltip2 && (\n                                                                    <Box position=\"absolute\" top=\"0\" left=\"10%\" transform=\"translateX(10px)\" bg=\"gray.700\" color=\"white\" fontSize=\"xs\" px={2} py={1} borderRadius=\"md\" whiteSpace=\"nowrap\" pointerEvents=\"none\">\n                                                                    {tooltip2.label} {tooltip2.percent}\n                                                                    </Box>\n                                                                )}\n                                                                </Box>\n                                                                <Popover closeOnBlur={false} >\n                                                            {({ isOpen, onClose }) => (\n                                                                <>\n                                                                <PopoverTrigger>\n                                                                <Button size=\"sm\" variant=\"link\" color={textColor}>\n                                                                    <Text fontSize=\"15\">View HCI Courses</Text>\n                                                                    </Button>\n                                                                </PopoverTrigger>\n                                                                <Portal>\n                                                                    <PopoverContent fontSize=\"sm\">\n                                                                    <PopoverHeader fontWeight=\"semibold\">Human-Computer Interaction Coursework</PopoverHeader>\n                                                                    <PopoverCloseButton />\n                                                                    <PopoverBody>\n                                                                    <Box>\n                                                                        {[\"A+\", \"A\", \"B+\"].map((grade) => (\n                                                                            <Box key={grade} mb={4}>\n                                                                            <Text fontWeight=\"bold\" fontSize=\"sm\" color=\"gray.600\" mb={1}>\n                                                                                {grade} Grade\n                                                                            </Text>\n                                                                            <UnorderedList spacing={1} pl={4}>\n                                                                                {groupedCourses_2[grade].map((course) => (\n                                                                                <ListItem key={course}>{course}</ListItem>\n                                                                                ))}\n                                                                            </UnorderedList>\n                                                                            </Box>\n                                                                        ))}\n                                                                        </Box>\n                                                                    </PopoverBody>\n                                                                    {/* <PopoverFooter>This is the footer</PopoverFooter> */}\n                                                                    </PopoverContent>\n                                                                </Portal>\n                                                                </>\n                                                            )}\n                                                            </Popover>\n                                                            </GridItem>\n                                                            </Grid>\n                                                        </Box>\n\n                    </Flex>\n\n                    \n\n\n\n\n\n\n\n                    \n                    \n                </Box>\n            </Flex>\n        </Box>\n        \n    );\n};","import { configs } from \"shared/content/Content\";\n\nexport const open = (link: string) => window.open(link, \"_blank\");\n\nexport const onResumeOpen = () => {\n    open(configs.common.resume);\n};\n\nexport const onScholarOpen = (link : string) => {\n    window.open(link, \"_blank\");\n};\n\n\n\nexport const onMailTo = () => {\n    open(\"mailto:\" + configs.common.email);\n};\n"],"names":["configs","common","landing","featuredProjects","otherProjects","about","MarkdownFile","Mapper","Landing","LandingMd","About","AboutMd","useContent","fileName","data","setData","useState","useEffect","fetch","then","res","text","Content","children","rest","spacing","components","p","node","props","a","href","target","color","ul","ordered","listStylePosition","display","gridTemplateColumns","listStyleType","fontWeight","li","index","Tags","id","tags","size","py","wrap","gap","map","tag","idx","transition","transitionProperty","textTransform","borderRadius","px","fontSize","LinksToIconMapper","linkedin","github","facebook","instagram","youtube","mail","google_scholar","curriculum_vitae","Socials","resume","exclude","delay","textColor","useColorModeValue","align","onClick","onResumeOpen","socials","social","includes","type","as","open","link","boxSize","variant","icon","replace","cardData","title","description","image","conference","paper","date","abstract","Research","currentIndex","setCurrentIndex","progress","setProgress","isPaused","setIsPaused","selectedCard","setSelectedCard","isOpen","onOpen","onClose","useDisclosure","intervalRef","useRef","current","setInterval","prev","goToNext","clearInterval","length","w","maxW","mx","textAlign","position","height","overflow","card","isCurrent","isLeft","isRight","scale","zIndex","opacity","offsetX","handleCardClick","cursor","top","left","transform","borderWidth","boxShadow","bg","right","style","width","h","src","alt","maxH","objectFit","justify","noOfLines","mb","alignItems","justifyContent","_hover","mt","_","handleSelect","colorScheme","value","isCentered","base","md","lg","flexDirection","borderBottom","borderColor","_dark","pt","pb","overflowY","flex","rel","mr","HighlightTag","whiteSpace","Updates","expanded","setExpanded","groupedUpdates","year","items","visibleGroups","slice","templateColumns","rowGap","group","groupIndex","Fragment","colSpan","rowSpan","update","itemIndex","educationData","degree","major","EducationEntry","bulletColor","borderTop","borderLeft","pl","content","bgLighter","bgDarker","typedEl","typedColor","label","data_2","circumference","Math","PI","tooltip1","setTooltip1","tooltip2","setTooltip2","isOpenBA","onToggle","onToggleBA","groupedCourses","A","groupedCourses_2","forEach","course","match","grade","push","typed","Typed","strings","typeSpeed","backSpeed","loop","cursorChar","smartBackspace","backDelay","destroy","direction","jpg","ref","edu","item","cx","cy","r","fill","stroke","strokeWidth","offset","strokeLength","strokeDasharray","rotation","strokeDashoffset","onMouseEnter","percent","toFixed","onMouseLeave","lineHeight","pointerEvents","closeOnBlur","window"],"sourceRoot":""}