{"version":3,"file":"static/js/212.eb265e35.chunk.js","mappings":"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","sources":["shared/content/Content.tsx","utils/useScroll.ts","shared/navbar/logo-type/LogoType.tsx","shared/color-mode-button/ColorModeButton.tsx","shared/navbar/drawer/Drawer.tsx","shared/navbar/Navbar.tsx"],"sourcesContent":["import { FC, useEffect, useState } from \"react\";\n\nimport { Text, Stack, StyleProps, Link, UnorderedList } from \"@chakra-ui/react\";\nimport ReactMarkdown from \"react-markdown\";\n\nimport common from \"content/common/common.json\";\nimport landing from \"content/landing/landing-config.json\";\nimport featuredProjects from \"content/featured-projects/featured-projects-config.json\";\nimport otherProjects from \"content/other-projects/other-projects-config.json\";\nimport about from \"content/about/about-config.json\";\n\nimport LandingMd from \"content/landing/landing.md\";\nimport AboutMd from \"content/about/about.md\";\n\nexport const configs = {\n    common,\n    landing,\n    featuredProjects,\n    otherProjects,\n    about,\n};\n\ninterface State {\n    landing: string;\n    about: string;\n}\n\nexport enum MarkdownFile {\n    Landing = \"landing\",\n    About = \"about\",\n}\n\nconst Mapper = {\n    [MarkdownFile.Landing]: LandingMd,\n    [MarkdownFile.About]: AboutMd,\n};\n\nexport const useContent = (fileName: MarkdownFile) => {\n    const [data, setData] = useState<State>({ landing: \"\", about: \"\" });\n\n    useEffect(() => {\n        fetch(Mapper[fileName])\n            .then((res) => res.text())\n            .then((text) => setData((data) => ({ ...data, [fileName]: text })));\n    }, [fileName]);\n\n    return data;\n};\n\ninterface Props extends StyleProps {\n    children?: string;\n}\n\nexport const Content: FC<Props> = ({ children, ...rest }) => {\n    return (\n        <Stack spacing=\"0\">\n            <ReactMarkdown\n                components={{\n                    p: ({ node, ...props }) => <Text {...rest} {...props} />,\n                    a: ({ node, ...props }) => (\n                        <Link href={props.href} target=\"_blank\" color=\"primary.700\" {...props} />\n                    ),\n                    ul: ({ node, ...props }) => {\n                        const { ordered, ...rest } = props;\n\n                        return (\n                            <UnorderedList\n                                {...rest}\n                                data-aos=\"fade\"\n                                listStylePosition=\"inside\"\n                                display=\"grid\"\n                                gridTemplateColumns=\"repeat(2, 1fr)\"\n                                listStyleType=\"'‣ '\"\n                                fontWeight=\"500\"\n                            />\n                        );\n                    },\n                    li: ({ node, ...props }) => {\n                        const { ordered, ...rest } = props;\n\n                        return <li data-aos=\"flip-up\" data-aos-delay={props.index * 100 + 400} {...rest} />;\n                    },\n                }}\n            >\n                {children as string}\n            </ReactMarkdown>\n        </Stack>\n    );\n};\n","import { useEffect, useState } from \"react\";\n\nexport const WorkPageId = \"page-work\";\nexport const AboutPageId = \"page-about\";\nexport const HomeId = \"page-home\";\nexport const ExperienceId =\"page-experience\"\n\nexport enum Page {\n   \n    About = \"about\",\n    Work = \"work\",\n    Home = \"home\",\n    Experience = \"experience\"\n}\n\nconst pageIds = [HomeId, WorkPageId, AboutPageId, ExperienceId];\n\nexport const useScroll = () => {\n    const [page, setPage] = useState<string>(\"\");\n\n    const scrollHandler = () => {\n        const documentTop = document.scrollingElement?.scrollTop!;\n        console.log(documentTop);\n        const pages = pageIds.map((page) => document.getElementById(page));\n        let newPage = \"\";\n\n        pages.forEach((page) => {\n            if (page) {\n                const top = page.offsetTop;\n                const height = page.clientHeight;\n\n                if (top < documentTop && top + height > documentTop) {\n                    newPage = page.id;\n                }\n            }\n        });\n\n        setPage(newPage);\n    };\n\n    useEffect(() => {\n        setTimeout(() => {\n            scrollHandler();\n        }, 100);\n\n        document.addEventListener(\"scroll\", scrollHandler);\n\n        return () => {\n            document.removeEventListener(\"scroll\", () => {});\n        };\n    }, []);\n\n    return page;\n};\n","import { FC } from \"react\";\nimport { AboutPageId, useScroll, WorkPageId, HomeId } from \"utils/useScroll\";\n\nimport { Box, Flex, Text, Heading, useBreakpointValue, Button, IconButton, WrapItem, Tooltip, Image, Badge } from \"@chakra-ui/react\";\nimport { configs, Content, MarkdownFile, useContent } from \"shared/content/Content\";\nimport { VolumeIcon } from \"utils/Icons\";\nimport logoImage from './logo.png';\ninterface Props {\n    text: {\n        mobile: string;\n        desktop: string;\n    };\n}\n\nexport const LogoType: FC<Props> = ({ text }) => {\n    const variant = useBreakpointValue({ base: text.mobile, md: text.desktop });\n    const onPlay = () => {\n        const audio = new Audio(configs.common.audioFile);\n        audio.play();\n    };\n    const currentPage = useScroll();\n\n    const toSection = (section: string, offset=75) => {\n        const element = document.getElementById(section)\n        if (element) {\n            const elementPosition = element.getBoundingClientRect().top + window.scrollY;\n            const targetPosition = elementPosition - offset;\n            window.scrollTo({ top: targetPosition, behavior: \"smooth\" });\n        }\n    };\n\n   \n    return (\n        <Box onClick={() => toSection(HomeId)} transition=\"all 0.2s ease-in-out\" _hover={{ cursor: \"pointer\", color: \"primary.600\" }}>\n        \n\n            {/* <Text mt=\"2\" mb=\"2\" mx=\"4\" fontFamily=\"signature\" fontSize=\"40px\" fontWeight=\"500\" lineHeight=\"1\"> */}\n                <Text mt=\"2\" mb=\"2\" mx=\"4\" fontSize=\"30px\" fontWeight=\"700\" lineHeight=\"1\">\n               {variant}\n               \n            \n                {/* {variant} */}\n                        {/* <Button\n                        size=\"s\"\n                        aria-label=\"pronunciation button\"\n                        as={IconButton}\n                        variant=\"icon\"\n                        fontSize=\"md\"\n                        color=\"primary.500\"\n                        icon={<VolumeIcon />}\n                        onClick={onPlay}\n                        />  */}\n                \n            </Text>\n      \n            {/* <Badge  mt=\"5\" mx=\"4\" >Updated in Sep.2025</Badge> */}\n                         \n        </Box>\n    );\n};\n","import { FC } from \"react\";\nimport {\n  HStack,\n  IconButton,\n  StyleProps,\n  Tooltip,\n  useColorMode,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { MoonIcon, SunIcon } from \"utils/Icons\";\n\nexport const ColorModeButton: FC<StyleProps> = (props) => {\n  const color = useColorModeValue(\"gray.800\", \"white\");\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  const tooltipLabel = colorMode === \"light\" ? \"Dark Mode\" : \"Light Mode\";\n\n  return (\n    <HStack {...props}>\n      <Tooltip label={tooltipLabel} hasArrow placement=\"bottom\">\n        <IconButton\n          aria-label=\"appearance\"\n          bg=\"transparent\"\n          color=\"primary.500\"\n          fontSize=\"lg\"\n          _hover={{ color: \"gray.400\" }}\n          _active={{ bg: \"transparent\" }}\n          icon={colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\n          variant=\"ghost\"\n          size=\"xs\"\n          onClick={() => {\n            toggleColorMode();\n            window.scrollBy(0, 1);\n            window.scrollBy(0, -1);\n          }}\n          w=\"32px\"\n          h=\"32px\"\n        />\n      </Tooltip>\n    </HStack>\n  );\n};\n","import { FC, useRef } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nimport {\n    Box,\n    Button,\n    Drawer,\n    DrawerBody,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton,\n    useDisclosure,\n    IconButton,\n    StyleProps,\n    Flex,\n    VStack,\n    useColorModeValue,\n    HStack\n} from \"@chakra-ui/react\";\n\nimport { ColorModeButton } from \"shared/color-mode-button/ColorModeButton\";\nimport { MenuIcon } from \"utils/Icons\";\nimport { Socials } from \"shared/socials/Socials\";\n\n// 2. Props 인터페이스를 간단하게 수정합니다.\ninterface Props extends StyleProps {\n    currentPage: string; // URL 경로를 받을 prop\n}\n\nexport const MenuDrawer: FC<Props> = ({ currentPage, ...props }) => {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const btnRef = useRef<any>(null);\n    const navItemColor = useColorModeValue(\"gray.800\", \"white\");\n\n    // 3. 불필요한 onSectionClick 관련 코드를 모두 제거합니다.\n\n    return (\n        <Box {...props}>\n            <HStack spacing=\"0\">\n            <ColorModeButton />\n            <Button\n                as={IconButton}\n                variant=\"icon\"\n                ref={btnRef}\n                onClick={onOpen}\n                aria-label=\"open drawer\"\n                fontSize=\"lg\"\n                color=\"primary.500\"\n                icon={<MenuIcon />}\n                px=\"0\"\n                ml=\"2\"\n            />\n            </HStack>\n            \n            <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose} autoFocus={false}>\n                <DrawerOverlay />\n                <DrawerContent\n                maxW={{ base: \"60vw\", md: \"420px\", lg: \"520px\" }}\n                \n                boxShadow=\"2xl\"\n            >\n                    <DrawerHeader px=\"4\">\n                        <Flex justifyContent=\"space-between\">\n                            <DrawerCloseButton position=\"relative\" top=\"0\" right=\"0\" />\n                        </Flex>\n                    </DrawerHeader>\n\n                    <DrawerBody>\n                        <VStack spacing=\"6\" my=\"16\">\n                            \n                            \n                            <Button\n                                as={RouterLink}\n                                to=\"/\"\n                                onClick={onClose} // 링크 클릭 시 드로어를 닫습니다.\n                                variant=\"link\"\n                                color={navItemColor}\n                                // 5. currentPage(URL 경로)를 직접 비교합니다.\n                                textDecoration={currentPage === \"/\" ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                about me\n                            </Button>\n\n                            <Button\n                                as={RouterLink}\n                                to=\"/projects\"\n                                onClick={onClose}\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={currentPage === \"/projects\" ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                projects\n                            </Button>\n                            \n                            <Button\n                                as={RouterLink}\n                                to=\"/publications\"\n                                onClick={onClose}\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={currentPage === \"/publications\" ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                publications\n                            </Button>\n\n                            <Button\n                                as={RouterLink}\n                                to=\"/etc\"\n                                onClick={onClose}\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={currentPage === \"/etc\" ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                etc.\n                            </Button>\n                        </VStack>\n                        {/* <Flex justifyContent=\"center\" mt=\"10\">\n                            <Socials delay={100} resume={false} />\n                        </Flex> */}\n                    </DrawerBody>\n                </DrawerContent>\n            </Drawer>\n        </Box>\n    );\n};","import { FC } from \"react\";\n// 1. react-router-dom에서 Link와 useLocation을 가져옵니다.\nimport { Link as RouterLink, useLocation } from \"react-router-dom\";\n\nimport { Box, Button, Container, Flex, HStack, useColorModeValue } from \"@chakra-ui/react\";\nimport { configs } from \"shared/content/Content\";\nimport { LogoType } from \"shared/navbar/logo-type/LogoType\";\nimport { MenuDrawer } from \"./drawer/Drawer\";\nimport { ColorModeButton } from \"shared/color-mode-button/ColorModeButton\";\nimport avatar from \"../../content/avatar_withback.png\";\n\n// Navbar 컴포넌트\nexport const Navbar: FC = () => {\n    // 2. useLocation 훅으로 현재 경로 정보를 가져옵니다.\n    const location = useLocation();\n    const inactiveColor = useColorModeValue(\"gray.500\", \"gray.400\");\n    const navItemColor = useColorModeValue(\"gray.800\", \"white\");\n\n    // 3. toSection 함수와 useScroll 훅은 더 이상 필요 없으므로 삭제합니다.\n\n    return (\n        <Box \n            bg={useColorModeValue(\"gray.50\", \"gray.700\")} \n            boxShadow=\"lg\" \n            position=\"fixed\" \n            top=\"0\" \n            w=\"100%\" \n            left=\"50%\" \n            transform=\"translate(-50%)\" \n            zIndex=\"10\" \n            borderBottomWidth='1px'\n            opacity={0.85}\n        >\n            <Container py=\"3\" px=\"3\" data-aos=\"fade-down\" data-aos-duration=\"500\" data-aos-delay=\"100\">\n                <Flex justifyContent=\"space-between\" alignItems=\"center\">\n               \n                    {/* 로고 + 이미지 버튼을 한 그룹으로 묶기 */}\n                    <Flex alignItems=\"center\" gap=\"1\">   {/* gap으로 미세 간격 제어 */}\n                        <RouterLink to=\"/\">\n                        <LogoType text={configs.common.logoType} /> \n                        </RouterLink>\n\n                       \n                    </Flex>\n                                            \n\n                    <Flex alignItems=\"center\" display={{ base: \"none\", md: \"flex\" }}>\n                        \n                        <HStack spacing=\"8\" mr=\"6\">\n                        \n                            {/* 4. 모든 Button에 as={RouterLink}와 to=\"경로\"를 추가하고, onClick은 제거합니다. */}\n                            {/* <Button\n                                as={RouterLink}\n                                to=\"/\"\n                                variant=\"link\"\n                                color={navItemColor}\n                                // 5. location.pathname으로 현재 경로를 확인하여 밑줄을 표시합니다.\n                                textDecoration={location.pathname === \"/\" ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                fontSize=\"20px\"\n                                textColor={location.pathname ===\"/\"? \"primary.500\" : \"none\"}\n                            >\n                                YEO\n                            </Button> */}\n                             {/* 로고 바로 옆 이미지 버튼 */}\n                        {/* <Button\n                        as={RouterLink}\n                        to=\"/chat\"\n                        variant=\"ghost\"\n                        p={1}\n                        height=\"auto\"\n                        minW=\"auto\"  // 버튼 최소 너비 제거 → 아이콘 크기에 딱 맞게\n                        >\n                        <img \n                            src={avatar}\n                            alt=\"\"\n                            width=\"40\"\n                            height=\"40\"\n                            style={{ borderRadius: \"50%\" }}\n                        />\n                        \n                        </Button> */}\n\n\n                            <Button\n                                as={RouterLink}\n                                to=\"/\"\n                                variant=\"link\"\n                                color={navItemColor}\n                                // 5. location.pathname으로 현재 경로를 확인하여 밑줄을 표시합니다.\n                                textDecoration={location.pathname === \"/\" ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                fontSize=\"20px\"\n                                textColor={location.pathname ===\"/\"? \"primary.500\" : \"none\"}\n                            >\n                                about me\n                            </Button>\n\n                            <Button\n                                as={RouterLink}\n                                to=\"/projects\"\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={location.pathname === \"/projects\" ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                fontSize=\"20px\"\n                                textColor={location.pathname ===\"/projects\"? \"primary.500\" : \"none\"}\n                            >\n                                projects\n                            </Button>\n\n                            <Button\n                                as={RouterLink}\n                                to=\"/publications\"\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={location.pathname === \"/publications\" ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                fontSize=\"20px\"\n                                textColor={location.pathname ===\"/publications\"? \"primary.500\" : \"none\"}\n                            >\n                                publications\n                            </Button>\n\n                            <Button\n                                as={RouterLink}\n                                to=\"/etc\"\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={location.pathname === \"/etc\" ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                fontSize=\"20px\"\n                                textColor={location.pathname ===\"/etc\"? \"primary.500\" : \"none\"}\n                            >\n                                etc.\n                            </Button>\n                        </HStack>\n                        <ColorModeButton />\n                    </Flex>\n\n                    {/* 6. MenuDrawer에도 location 정보를 전달하여 현재 페이지를 표시하도록 합니다. */}\n                    <MenuDrawer\n                        currentPage={location.pathname}\n                        // onSectionClick은 더 이상 필요 없습니다. MenuDrawer 내부에서 Link를 사용하도록 수정해야 합니다.\n                        display={{ base: \"block\", md: \"none\" }}\n                    />\n                </Flex>\n            </Container>\n        </Box>\n    );\n};"],"names":["configs","common","landing","featuredProjects","otherProjects","about","MarkdownFile","Mapper","Landing","LandingMd","About","AboutMd","useContent","fileName","data","setData","useState","useEffect","fetch","then","res","text","Content","children","rest","spacing","components","p","node","props","a","href","target","color","ul","ordered","listStylePosition","display","gridTemplateColumns","listStyleType","fontWeight","li","index","HomeId","Page","pageIds","LogoType","variant","useBreakpointValue","base","mobile","md","desktop","page","setPage","scrollHandler","documentTop","document","scrollingElement","scrollTop","console","log","pages","map","getElementById","newPage","forEach","top","offsetTop","height","clientHeight","id","setTimeout","addEventListener","removeEventListener","useScroll","onClick","section","offset","element","targetPosition","getBoundingClientRect","window","scrollY","scrollTo","behavior","toSection","transition","_hover","cursor","mt","mb","mx","fontSize","lineHeight","ColorModeButton","useColorModeValue","colorMode","toggleColorMode","useColorMode","tooltipLabel","label","hasArrow","placement","bg","_active","icon","size","scrollBy","w","h","MenuDrawer","currentPage","isOpen","onOpen","onClose","useDisclosure","btnRef","useRef","navItemColor","as","IconButton","ref","px","ml","autoFocus","maxW","lg","boxShadow","justifyContent","position","right","my","RouterLink","to","textDecoration","textDecorationThickness","textDecorationColor","Navbar","location","useLocation","left","transform","zIndex","borderBottomWidth","opacity","py","alignItems","gap","logoType","mr","pathname","textColor"],"sourceRoot":""}